// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDioPorts_h___
#define ___tDioPorts_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"
#include "tDioPortsValues.h"


#ifndef ___tDioPortsValues_h___
#include "tDioPortsValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tDioPorts
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // DI_ChangeIrqRE_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeIrqRE_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x540,
         kId     = 0
      };
      tDI_ChangeIrqRE_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeIrqRE_Port0Id           = 1,
         kDI_ChangeIrqRE_Port1Id           = 2,
         kDI_ChangeIrqRE_Port2Id           = 3,
         kDI_ChangeIrqRE_Port3Id           = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeIrqRE_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeIrqRE_Register& setDI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqRE_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqRE_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeIrqRE_Register& setDI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqRE_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqRE_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeIrqRE_Register& setDI_ChangeIrqRE_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqRE_Port2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqRE_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqRE_Port2(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeIrqRE_Register& setDI_ChangeIrqRE_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqRE_Port3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqRE_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqRE_Port3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeIrqRE_Register(const tDI_ChangeIrqRE_Register&);
      tDI_ChangeIrqRE_Register& operator=(const tDI_ChangeIrqRE_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeDetectLatched_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeDetectLatched_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x544,
         kId     = 1
      };
      tDI_ChangeDetectLatched_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeDetectLatched_Port0Id   = 1,
         kDI_ChangeDetectLatched_Port1Id   = 2,
         kDI_ChangeDetectLatched_Port2Id   = 3,
         kDI_ChangeDetectLatched_Port3Id   = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeDetectLatched_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeDetectLatched_Register& setDI_ChangeDetectLatched_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeDetectLatched_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_ChangeDetectLatched_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeDetectLatched_Register& setDI_ChangeDetectLatched_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeDetectLatched_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_ChangeDetectLatched_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeDetectLatched_Register& setDI_ChangeDetectLatched_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeDetectLatched_Port2(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_ChangeDetectLatched_Port2(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeDetectLatched_Register& setDI_ChangeDetectLatched_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeDetectLatched_Port3(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDI_ChangeDetectLatched_Port3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeDetectLatched_Register(const tDI_ChangeDetectLatched_Register&);
      tDI_ChangeDetectLatched_Register& operator=(const tDI_ChangeDetectLatched_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeIrqFE_Register
   //---------------------------------------------------------------------------
   class tDI_ChangeIrqFE_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x544,
         kId     = 2
      };
      tDI_ChangeIrqFE_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_ChangeIrqFE_Port0Id           = 1,
         kDI_ChangeIrqFE_Port1Id           = 2,
         kDI_ChangeIrqFE_Port2Id           = 3,
         kDI_ChangeIrqFE_Port3Id           = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_ChangeIrqFE_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_ChangeIrqFE_Register& setDI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqFE_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqFE_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeIrqFE_Register& setDI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqFE_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqFE_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeIrqFE_Register& setDI_ChangeIrqFE_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqFE_Port2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqFE_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqFE_Port2(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_ChangeIrqFE_Register& setDI_ChangeIrqFE_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDI_ChangeIrqFE_Port3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_ChangeIrqFE_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDI_ChangeIrqFE_Port3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_ChangeIrqFE_Register(const tDI_ChangeIrqFE_Register&);
      tDI_ChangeIrqFE_Register& operator=(const tDI_ChangeIrqFE_Register&);

   };

   //---------------------------------------------------------------------------
   // Static_Digital_Input_Register
   //---------------------------------------------------------------------------
   class tStatic_Digital_Input_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x530,
         kId     = 3
      };
      tStatic_Digital_Input_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDIO_StaticInputValue_Port0Id     = 1,
         kDIO_StaticInputValue_Port1Id     = 2,
         kDIO_StaticInputValue_Port2Id     = 3,
         kDIO_StaticInputValue_Port3Id     = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tStatic_Digital_Input_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tStatic_Digital_Input_Register& setDIO_StaticInputValue_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticInputValue_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDIO_StaticInputValue_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Input_Register& setDIO_StaticInputValue_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticInputValue_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDIO_StaticInputValue_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Input_Register& setDIO_StaticInputValue_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticInputValue_Port2(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDIO_StaticInputValue_Port2(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Input_Register& setDIO_StaticInputValue_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticInputValue_Port3(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readDIO_StaticInputValue_Port3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tStatic_Digital_Input_Register(const tStatic_Digital_Input_Register&);
      tStatic_Digital_Input_Register& operator=(const tStatic_Digital_Input_Register&);

   };

   //---------------------------------------------------------------------------
   // Static_Digital_Output_Register
   //---------------------------------------------------------------------------
   class tStatic_Digital_Output_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x4b0,
         kId     = 4
      };
      tStatic_Digital_Output_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDIO_StaticOutputValue_Port0Id    = 1,
         kDIO_StaticOutputValue_Port1Id    = 2,
         kDIO_StaticOutputValue_Port2Id    = 3,
         kDIO_StaticOutputValue_Port3Id    = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tStatic_Digital_Output_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tStatic_Digital_Output_Register& setDIO_StaticOutputValue_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticOutputValue_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIO_StaticOutputValue_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIO_StaticOutputValue_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Output_Register& setDIO_StaticOutputValue_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticOutputValue_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIO_StaticOutputValue_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIO_StaticOutputValue_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Output_Register& setDIO_StaticOutputValue_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticOutputValue_Port2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIO_StaticOutputValue_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIO_StaticOutputValue_Port2(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Output_Register& setDIO_StaticOutputValue_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIO_StaticOutputValue_Port3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIO_StaticOutputValue_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIO_StaticOutputValue_Port3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tStatic_Digital_Output_Register(const tStatic_Digital_Output_Register&);
      tStatic_Digital_Output_Register& operator=(const tStatic_Digital_Output_Register&);

   };

   //---------------------------------------------------------------------------
   // DIO_Direction_Register
   //---------------------------------------------------------------------------
   class tDIO_Direction_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x4b4,
         kId     = 5
      };
      tDIO_Direction_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDIODirection_Port0Id             = 1,
         kDIODirection_Port1Id             = 2,
         kDIODirection_Port2Id             = 3,
         kDIODirection_Port3Id             = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDIO_Direction_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDIO_Direction_Register& setDIODirection_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIODirection_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIODirection_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIODirection_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setDIODirection_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIODirection_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIODirection_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIODirection_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setDIODirection_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIODirection_Port2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIODirection_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIODirection_Port2(nMDBG::tStatus2* statusChain = NULL);

      inline tDIO_Direction_Register& setDIODirection_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDIODirection_Port3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDIODirection_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDIODirection_Port3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDIO_Direction_Register(const tDIO_Direction_Register&);
      tDIO_Direction_Register& operator=(const tDIO_Direction_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_FilterRegister_Port0and1
   //---------------------------------------------------------------------------
   class tDI_FilterRegister_Port0and1 : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x54c,
         kId     = 6
      };
      tDI_FilterRegister_Port0and1();


      typedef enum {
         kRegisterId                          = 0,
         kDI_Filter_Select_Port0_Line0Id   = 1,
         kDI_Filter_Select_Port0_Line1Id   = 2,
         kDI_Filter_Select_Port0_Line2Id   = 3,
         kDI_Filter_Select_Port0_Line3Id   = 4,
         kDI_Filter_Select_Port0_Line4Id   = 5,
         kDI_Filter_Select_Port0_Line5Id   = 6,
         kDI_Filter_Select_Port0_Line6Id   = 7,
         kDI_Filter_Select_Port0_Line7Id   = 8,
         kDI_Filter_Select_Port1_Line0Id   = 9,
         kDI_Filter_Select_Port1_Line1Id   = 10,
         kDI_Filter_Select_Port1_Line2Id   = 11,
         kDI_Filter_Select_Port1_Line3Id   = 12,
         kDI_Filter_Select_Port1_Line4Id   = 13,
         kDI_Filter_Select_Port1_Line5Id   = 14,
         kDI_Filter_Select_Port1_Line6Id   = 15,
         kDI_Filter_Select_Port1_Line7Id   = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_FilterRegister_Port0and1& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port0_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port0_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port0_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port0_Line7(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port0and1& setDI_Filter_Select_Port1_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port1_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port1_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port1_Line7(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FilterRegister_Port0and1(const tDI_FilterRegister_Port0and1&);
      tDI_FilterRegister_Port0and1& operator=(const tDI_FilterRegister_Port0and1&);

   };

   //---------------------------------------------------------------------------
   // DI_FilterRegister_Port2and3
   //---------------------------------------------------------------------------
   class tDI_FilterRegister_Port2and3 : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x550,
         kId     = 7
      };
      tDI_FilterRegister_Port2and3();


      typedef enum {
         kRegisterId                          = 0,
         kDI_Filter_Select_Port2_Line0Id   = 1,
         kDI_Filter_Select_Port2_Line1Id   = 2,
         kDI_Filter_Select_Port2_Line2Id   = 3,
         kDI_Filter_Select_Port2_Line3Id   = 4,
         kDI_Filter_Select_Port2_Line4Id   = 5,
         kDI_Filter_Select_Port2_Line5Id   = 6,
         kDI_Filter_Select_Port2_Line6Id   = 7,
         kDI_Filter_Select_Port2_Line7Id   = 8,
         kDI_Filter_Select_Port3_Line0Id   = 9,
         kDI_Filter_Select_Port3_Line1Id   = 10,
         kDI_Filter_Select_Port3_Line2Id   = 11,
         kDI_Filter_Select_Port3_Line3Id   = 12,
         kDI_Filter_Select_Port3_Line4Id   = 13,
         kDI_Filter_Select_Port3_Line5Id   = 14,
         kDI_Filter_Select_Port3_Line6Id   = 15,
         kDI_Filter_Select_Port3_Line7Id   = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDI_FilterRegister_Port2and3& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port2_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port2_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port2_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port2_Line7(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_FilterRegister_Port2and3& setDI_Filter_Select_Port3_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDI_Filter_Select_t getDI_Filter_Select_Port3_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDI_Filter_Select_Port3_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDI_Filter_Select_t readDI_Filter_Select_Port3_Line7(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_FilterRegister_Port2and3(const tDI_FilterRegister_Port2and3&);
      tDI_FilterRegister_Port2and3& operator=(const tDI_FilterRegister_Port2and3&);

   };

   //---------------------------------------------------------------------------
   // DO_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   class tDO_WDT_SafeStateRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x4d0,
         kId     = 8
      };
      tDO_WDT_SafeStateRegister();


      typedef enum {
         kRegisterId                          = 0,
         kDO_WDT_SafeStateValue_Port0Id    = 1,
         kDO_WDT_SafeStateValue_Port1Id    = 2,
         kDO_WDT_SafeStateValue_Port2Id    = 3,
         kDO_WDT_SafeStateValue_Port3Id    = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_WDT_SafeStateRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_WDT_SafeStateValue_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getDO_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_SafeStateValue_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeDO_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_WDT_SafeStateValue_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readDO_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_WDT_SafeStateValue_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getDO_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_SafeStateValue_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeDO_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_WDT_SafeStateValue_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readDO_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_WDT_SafeStateValue_Port2(nMDBG::tStatus2* statusChain = NULL) const;

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port2(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getDO_WDT_SafeStateValue_Port2(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_SafeStateValue_Port2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeDO_WDT_SafeStateValue_Port2(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_WDT_SafeStateValue_Port2(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readDO_WDT_SafeStateValue_Port2(u32 position, nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getDO_WDT_SafeStateValue_Port3(nMDBG::tStatus2* statusChain = NULL) const;

      inline tDO_WDT_SafeStateRegister& setDO_WDT_SafeStateValue_Port3(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getDO_WDT_SafeStateValue_Port3(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_SafeStateValue_Port3(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeDO_WDT_SafeStateValue_Port3(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readDO_WDT_SafeStateValue_Port3(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readDO_WDT_SafeStateValue_Port3(u32 position, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_WDT_SafeStateRegister(const tDO_WDT_SafeStateRegister&);
      tDO_WDT_SafeStateRegister& operator=(const tDO_WDT_SafeStateRegister&);

   };

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect_Port0and1_Register
   //---------------------------------------------------------------------------
   class tDO_WDT_ModeSelect_Port0and1_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x4d4,
         kId     = 9
      };
      tDO_WDT_ModeSelect_Port0and1_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_WDT_ModePort0_Line0Id         = 1,
         kDO_WDT_ModePort0_Line1Id         = 2,
         kDO_WDT_ModePort0_Line2Id         = 3,
         kDO_WDT_ModePort0_Line3Id         = 4,
         kDO_WDT_ModePort0_Line4Id         = 5,
         kDO_WDT_ModePort0_Line5Id         = 6,
         kDO_WDT_ModePort0_Line6Id         = 7,
         kDO_WDT_ModePort0_Line7Id         = 8,
         kDO_WDT_ModePort1_Line0Id         = 9,
         kDO_WDT_ModePort1_Line1Id         = 10,
         kDO_WDT_ModePort1_Line2Id         = 11,
         kDO_WDT_ModePort1_Line3Id         = 12,
         kDO_WDT_ModePort1_Line4Id         = 13,
         kDO_WDT_ModePort1_Line5Id         = 14,
         kDO_WDT_ModePort1_Line6Id         = 15,
         kDO_WDT_ModePort1_Line7Id         = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect_Port0and1_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort0_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort0_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort0_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort0_Line7(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port0and1_Register& setDO_WDT_ModePort1_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort1_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort1_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort1_Line7(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_WDT_ModeSelect_Port0and1_Register(const tDO_WDT_ModeSelect_Port0and1_Register&);
      tDO_WDT_ModeSelect_Port0and1_Register& operator=(const tDO_WDT_ModeSelect_Port0and1_Register&);

   };

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect_Port2and3_Register
   //---------------------------------------------------------------------------
   class tDO_WDT_ModeSelect_Port2and3_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tDioPorts tRegisterMap;

      enum {
         kOffset = 0x4d8,
         kId     = 10
      };
      tDO_WDT_ModeSelect_Port2and3_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDO_WDT_ModePort2_Line0Id         = 1,
         kDO_WDT_ModePort2_Line1Id         = 2,
         kDO_WDT_ModePort2_Line2Id         = 3,
         kDO_WDT_ModePort2_Line3Id         = 4,
         kDO_WDT_ModePort2_Line4Id         = 5,
         kDO_WDT_ModePort2_Line5Id         = 6,
         kDO_WDT_ModePort2_Line6Id         = 7,
         kDO_WDT_ModePort2_Line7Id         = 8,
         kDO_WDT_ModePort3_Line0Id         = 9,
         kDO_WDT_ModePort3_Line1Id         = 10,
         kDO_WDT_ModePort3_Line2Id         = 11,
         kDO_WDT_ModePort3_Line3Id         = 12,
         kDO_WDT_ModePort3_Line4Id         = 13,
         kDO_WDT_ModePort3_Line5Id         = 14,
         kDO_WDT_ModePort3_Line6Id         = 15,
         kDO_WDT_ModePort3_Line7Id         = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect_Port2and3_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort2_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort2_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort2_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort2_Line7(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tDO_WDT_ModeSelect_Port2and3_Register& setDO_WDT_ModePort3_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nDioPorts::tDO_WDT_Mode_t getDO_WDT_ModePort3_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeDO_WDT_ModePort3_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nDioPorts::tDO_WDT_Mode_t readDO_WDT_ModePort3_Line7(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDO_WDT_ModeSelect_Port2and3_Register(const tDO_WDT_ModeSelect_Port2and3_Register&);
      tDO_WDT_ModeSelect_Port2and3_Register& operator=(const tDO_WDT_ModeSelect_Port2and3_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_ChangeIrqRE_Register
   //---------------------------------------------------------------------------
   tDI_ChangeIrqRE_Register DI_ChangeIrqRE_Register;

   //---------------------------------------------------------------------------
   // DI_ChangeDetectLatched_Register
   //---------------------------------------------------------------------------
   tDI_ChangeDetectLatched_Register DI_ChangeDetectLatched_Register;

   //---------------------------------------------------------------------------
   // DI_ChangeIrqFE_Register
   //---------------------------------------------------------------------------
   tDI_ChangeIrqFE_Register DI_ChangeIrqFE_Register;

   //---------------------------------------------------------------------------
   // Static_Digital_Input_Register
   //---------------------------------------------------------------------------
   tStatic_Digital_Input_Register Static_Digital_Input_Register;

   //---------------------------------------------------------------------------
   // Static_Digital_Output_Register
   //---------------------------------------------------------------------------
   tStatic_Digital_Output_Register Static_Digital_Output_Register;

   //---------------------------------------------------------------------------
   // DIO_Direction_Register
   //---------------------------------------------------------------------------
   tDIO_Direction_Register DIO_Direction_Register;

   //---------------------------------------------------------------------------
   // DI_FilterRegister_Port0and1
   //---------------------------------------------------------------------------
   tDI_FilterRegister_Port0and1 DI_FilterRegister_Port0and1;

   //---------------------------------------------------------------------------
   // DI_FilterRegister_Port2and3
   //---------------------------------------------------------------------------
   tDI_FilterRegister_Port2and3 DI_FilterRegister_Port2and3;

   //---------------------------------------------------------------------------
   // DO_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   tDO_WDT_SafeStateRegister DO_WDT_SafeStateRegister;

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect_Port0and1_Register
   //---------------------------------------------------------------------------
   tDO_WDT_ModeSelect_Port0and1_Register DO_WDT_ModeSelect_Port0and1_Register;

   //---------------------------------------------------------------------------
   // DO_WDT_ModeSelect_Port2and3_Register
   //---------------------------------------------------------------------------
   tDO_WDT_ModeSelect_Port2and3_Register DO_WDT_ModeSelect_Port2and3_Register;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kDI_ChangeIrqRE_RegisterId        = 0,
      kDI_ChangeIrqRE_Port0Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqRE_Register::kDI_ChangeIrqRE_Port0Id, kDI_ChangeIrqRE_RegisterId),
      kDI_ChangeIrqRE_Port1Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqRE_Register::kDI_ChangeIrqRE_Port1Id, kDI_ChangeIrqRE_RegisterId),
      kDI_ChangeIrqRE_Port2Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqRE_Register::kDI_ChangeIrqRE_Port2Id, kDI_ChangeIrqRE_RegisterId),
      kDI_ChangeIrqRE_Port3Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqRE_Register::kDI_ChangeIrqRE_Port3Id, kDI_ChangeIrqRE_RegisterId),

      kDI_ChangeDetectLatched_RegisterId    = 1,
      kDI_ChangeDetectLatched_Port0Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectLatched_Register::kDI_ChangeDetectLatched_Port0Id, kDI_ChangeDetectLatched_RegisterId),
      kDI_ChangeDetectLatched_Port1Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectLatched_Register::kDI_ChangeDetectLatched_Port1Id, kDI_ChangeDetectLatched_RegisterId),
      kDI_ChangeDetectLatched_Port2Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectLatched_Register::kDI_ChangeDetectLatched_Port2Id, kDI_ChangeDetectLatched_RegisterId),
      kDI_ChangeDetectLatched_Port3Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeDetectLatched_Register::kDI_ChangeDetectLatched_Port3Id, kDI_ChangeDetectLatched_RegisterId),

      kDI_ChangeIrqFE_RegisterId        = 2,
      kDI_ChangeIrqFE_Port0Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqFE_Register::kDI_ChangeIrqFE_Port0Id, kDI_ChangeIrqFE_RegisterId),
      kDI_ChangeIrqFE_Port1Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqFE_Register::kDI_ChangeIrqFE_Port1Id, kDI_ChangeIrqFE_RegisterId),
      kDI_ChangeIrqFE_Port2Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqFE_Register::kDI_ChangeIrqFE_Port2Id, kDI_ChangeIrqFE_RegisterId),
      kDI_ChangeIrqFE_Port3Id           = nNIMXRegisterMap120_mBuildFieldId(tDI_ChangeIrqFE_Register::kDI_ChangeIrqFE_Port3Id, kDI_ChangeIrqFE_RegisterId),

      kStatic_Digital_Input_RegisterId  = 3,
      kDIO_StaticInputValue_Port0Id     = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Input_Register::kDIO_StaticInputValue_Port0Id, kStatic_Digital_Input_RegisterId),
      kDIO_StaticInputValue_Port1Id     = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Input_Register::kDIO_StaticInputValue_Port1Id, kStatic_Digital_Input_RegisterId),
      kDIO_StaticInputValue_Port2Id     = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Input_Register::kDIO_StaticInputValue_Port2Id, kStatic_Digital_Input_RegisterId),
      kDIO_StaticInputValue_Port3Id     = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Input_Register::kDIO_StaticInputValue_Port3Id, kStatic_Digital_Input_RegisterId),

      kStatic_Digital_Output_RegisterId   = 4,
      kDIO_StaticOutputValue_Port0Id    = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Output_Register::kDIO_StaticOutputValue_Port0Id, kStatic_Digital_Output_RegisterId),
      kDIO_StaticOutputValue_Port1Id    = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Output_Register::kDIO_StaticOutputValue_Port1Id, kStatic_Digital_Output_RegisterId),
      kDIO_StaticOutputValue_Port2Id    = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Output_Register::kDIO_StaticOutputValue_Port2Id, kStatic_Digital_Output_RegisterId),
      kDIO_StaticOutputValue_Port3Id    = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Output_Register::kDIO_StaticOutputValue_Port3Id, kStatic_Digital_Output_RegisterId),

      kDIO_Direction_RegisterId         = 5,
      kDIODirection_Port0Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kDIODirection_Port0Id, kDIO_Direction_RegisterId),
      kDIODirection_Port1Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kDIODirection_Port1Id, kDIO_Direction_RegisterId),
      kDIODirection_Port2Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kDIODirection_Port2Id, kDIO_Direction_RegisterId),
      kDIODirection_Port3Id             = nNIMXRegisterMap120_mBuildFieldId(tDIO_Direction_Register::kDIODirection_Port3Id, kDIO_Direction_RegisterId),

      kDI_FilterRegister_Port0and1Id    = 6,
      kDI_Filter_Select_Port0_Line0Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line0Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port0_Line1Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line1Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port0_Line2Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line2Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port0_Line3Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line3Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port0_Line4Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line4Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port0_Line5Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line5Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port0_Line6Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line6Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port0_Line7Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port0_Line7Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line0Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line0Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line1Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line1Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line2Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line2Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line3Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line3Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line4Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line4Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line5Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line5Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line6Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line6Id, kDI_FilterRegister_Port0and1Id),
      kDI_Filter_Select_Port1_Line7Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port0and1::kDI_Filter_Select_Port1_Line7Id, kDI_FilterRegister_Port0and1Id),

      kDI_FilterRegister_Port2and3Id    = 7,
      kDI_Filter_Select_Port2_Line0Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line0Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port2_Line1Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line1Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port2_Line2Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line2Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port2_Line3Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line3Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port2_Line4Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line4Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port2_Line5Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line5Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port2_Line6Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line6Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port2_Line7Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port2_Line7Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line0Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line0Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line1Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line1Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line2Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line2Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line3Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line3Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line4Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line4Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line5Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line5Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line6Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line6Id, kDI_FilterRegister_Port2and3Id),
      kDI_Filter_Select_Port3_Line7Id   = nNIMXRegisterMap120_mBuildFieldId(tDI_FilterRegister_Port2and3::kDI_Filter_Select_Port3_Line7Id, kDI_FilterRegister_Port2and3Id),

      kDO_WDT_SafeStateRegisterId       = 8,
      kDO_WDT_SafeStateValue_Port0Id    = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_SafeStateRegister::kDO_WDT_SafeStateValue_Port0Id, kDO_WDT_SafeStateRegisterId),
      kDO_WDT_SafeStateValue_Port1Id    = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_SafeStateRegister::kDO_WDT_SafeStateValue_Port1Id, kDO_WDT_SafeStateRegisterId),
      kDO_WDT_SafeStateValue_Port2Id    = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_SafeStateRegister::kDO_WDT_SafeStateValue_Port2Id, kDO_WDT_SafeStateRegisterId),
      kDO_WDT_SafeStateValue_Port3Id    = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_SafeStateRegister::kDO_WDT_SafeStateValue_Port3Id, kDO_WDT_SafeStateRegisterId),

      kDO_WDT_ModeSelect_Port0and1_RegisterId         = 9,
      kDO_WDT_ModePort0_Line0Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line0Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort0_Line1Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line1Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort0_Line2Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line2Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort0_Line3Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line3Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort0_Line4Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line4Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort0_Line5Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line5Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort0_Line6Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line6Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort0_Line7Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort0_Line7Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line0Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line0Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line1Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line1Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line2Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line2Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line3Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line3Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line4Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line4Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line5Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line5Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line6Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line6Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),
      kDO_WDT_ModePort1_Line7Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port0and1_Register::kDO_WDT_ModePort1_Line7Id, kDO_WDT_ModeSelect_Port0and1_RegisterId),

      kDO_WDT_ModeSelect_Port2and3_RegisterId         = 10,
      kDO_WDT_ModePort2_Line0Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line0Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort2_Line1Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line1Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort2_Line2Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line2Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort2_Line3Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line3Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort2_Line4Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line4Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort2_Line5Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line5Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort2_Line6Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line6Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort2_Line7Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort2_Line7Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line0Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line0Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line1Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line1Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line2Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line2Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line3Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line3Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line4Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line4Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line5Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line5Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line6Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line6Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),
      kDO_WDT_ModePort3_Line7Id         = nNIMXRegisterMap120_mBuildFieldId(tDO_WDT_ModeSelect_Port2and3_Register::kDO_WDT_ModePort3_Line7Id, kDO_WDT_ModeSelect_Port2and3_RegisterId),


      kMaxRegisterId = 10

   } tId;

   tDioPorts(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tDioPorts();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tDioPorts();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[11];

};

#ifndef ___tDioPorts_ipp___
#ifndef ___tDioPorts_h_no_inline___
#include "tDioPorts.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

