// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDioPorts_ipp___
#define ___tDioPorts_ipp___

#ifndef ___tDioPorts_h___
#include "tDioPorts.h"
#endif

#ifndef ___nNIMXRegistermap_tStatus2Ptr_ipp___
#define ___nNIMXRegistermap_tStatus2Ptr_ipp___

typedef nMDBG::tStatus2 nNIMXRegisterMap120_tStatus2;


namespace nNIMXRegisterMap120 {
namespace {

typedef nNIMXRegisterMap120_tStatus2 tStatus2;

inline void setStatus(tStatus2* s, tStatus newStatus)
{
   if (s) s->setCode(newStatus);
}

inline tStatus* toPALStatusPtr(tStatus2* s)
{
   return s ? s->operator tStatus*() : ((tStatus*)NULL);
}

inline tBoolean statusIsFatal(tStatus2* s)
{
   return s && s->isFatal();
}

} // unnamed namespace
} // namespace nNIMXRegisterMap120

#endif // ___nNIMXRegistermap_tStatus2Ptr_ipp___


inline void tDioPorts::tReg32IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u32 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write32(offset, value);
}

inline u32 tDioPorts::tReg32IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u32 value = (u32)~0;
   if (s && s->isFatal()) return value;
   value = addrSpace.read32(offset);
   return value;
}

inline tBusSpaceReference tDioPorts::getBusSpaceReference(void) const
{
   return _addrSpace;
}

inline void tDioPorts::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _addressOffset = value;
}
inline u32 tDioPorts::getAddressOffset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return 0UL;
   return _addressOffset;
}
inline tBoolean tDioPorts::isDirty(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return kFalse;
   u32 regId = id&0x01FFFFFF;
   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return kFalse;
   }

   return _dirtyVector[regId];
}

inline void tDioPorts::markDirty(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   u32 regId = id&0x01FFFFFF;

   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return;
   }

   _dirtyVector[regId] = 1;
}

inline void tDioPorts::markClean(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   u32 regId = id&0x01FFFFFF;

   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return;
   }

   _dirtyVector[regId] = 0;
}

inline void tDioPorts::markDirty(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   unsigned int i;
   for (i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 1;
   }
}

inline void tDioPorts::markClean(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }
}

inline tDioPorts::tDI_ChangeIrqRE_Register::tDI_ChangeIrqRE_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDI_ChangeIrqRE_Register::tRegisterMap* tDioPorts::tDI_ChangeIrqRE_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDI_ChangeIrqRE_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDI_ChangeIrqRE_Register& tDioPorts::tDI_ChangeIrqRE_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqRE_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDI_ChangeIrqRE_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDI_ChangeIrqRE_Register& tDioPorts::tDI_ChangeIrqRE_Register::setDI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqRE_Register::getDI_ChangeIrqRE_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::writeDI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqRE_Port0(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqRE_Register::readDI_ChangeIrqRE_Port0(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqRE_Port0(s);
}

inline tDioPorts::tDI_ChangeIrqRE_Register& tDioPorts::tDI_ChangeIrqRE_Register::setDI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqRE_Register::getDI_ChangeIrqRE_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::writeDI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqRE_Port1(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqRE_Register::readDI_ChangeIrqRE_Port1(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqRE_Port1(s);
}

inline tDioPorts::tDI_ChangeIrqRE_Register& tDioPorts::tDI_ChangeIrqRE_Register::setDI_ChangeIrqRE_Port2(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqRE_Register::getDI_ChangeIrqRE_Port2(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::writeDI_ChangeIrqRE_Port2(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqRE_Port2(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqRE_Register::readDI_ChangeIrqRE_Port2(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqRE_Port2(s);
}

inline tDioPorts::tDI_ChangeIrqRE_Register& tDioPorts::tDI_ChangeIrqRE_Register::setDI_ChangeIrqRE_Port3(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqRE_Register::getDI_ChangeIrqRE_Port3(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline void tDioPorts::tDI_ChangeIrqRE_Register::writeDI_ChangeIrqRE_Port3(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqRE_Port3(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqRE_Register::readDI_ChangeIrqRE_Port3(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqRE_Port3(s);
}

inline tDioPorts::tDI_ChangeDetectLatched_Register::tDI_ChangeDetectLatched_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDI_ChangeDetectLatched_Register::tRegisterMap* tDioPorts::tDI_ChangeDetectLatched_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDI_ChangeDetectLatched_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tDioPorts::tDI_ChangeDetectLatched_Register& tDioPorts::tDI_ChangeDetectLatched_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDI_ChangeDetectLatched_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tDioPorts::tDI_ChangeDetectLatched_Register& tDioPorts::tDI_ChangeDetectLatched_Register::setDI_ChangeDetectLatched_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::getDI_ChangeDetectLatched_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::readDI_ChangeDetectLatched_Port0(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDI_ChangeDetectLatched_Port0(s);
}

inline tDioPorts::tDI_ChangeDetectLatched_Register& tDioPorts::tDI_ChangeDetectLatched_Register::setDI_ChangeDetectLatched_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::getDI_ChangeDetectLatched_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::readDI_ChangeDetectLatched_Port1(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDI_ChangeDetectLatched_Port1(s);
}

inline tDioPorts::tDI_ChangeDetectLatched_Register& tDioPorts::tDI_ChangeDetectLatched_Register::setDI_ChangeDetectLatched_Port2(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::getDI_ChangeDetectLatched_Port2(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::readDI_ChangeDetectLatched_Port2(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDI_ChangeDetectLatched_Port2(s);
}

inline tDioPorts::tDI_ChangeDetectLatched_Register& tDioPorts::tDI_ChangeDetectLatched_Register::setDI_ChangeDetectLatched_Port3(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::getDI_ChangeDetectLatched_Port3(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline u32 tDioPorts::tDI_ChangeDetectLatched_Register::readDI_ChangeDetectLatched_Port3(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDI_ChangeDetectLatched_Port3(s);
}

inline tDioPorts::tDI_ChangeIrqFE_Register::tDI_ChangeIrqFE_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDI_ChangeIrqFE_Register::tRegisterMap* tDioPorts::tDI_ChangeIrqFE_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDI_ChangeIrqFE_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDI_ChangeIrqFE_Register& tDioPorts::tDI_ChangeIrqFE_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqFE_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDI_ChangeIrqFE_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDI_ChangeIrqFE_Register& tDioPorts::tDI_ChangeIrqFE_Register::setDI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqFE_Register::getDI_ChangeIrqFE_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::writeDI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqFE_Port0(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqFE_Register::readDI_ChangeIrqFE_Port0(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqFE_Port0(s);
}

inline tDioPorts::tDI_ChangeIrqFE_Register& tDioPorts::tDI_ChangeIrqFE_Register::setDI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqFE_Register::getDI_ChangeIrqFE_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::writeDI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqFE_Port1(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqFE_Register::readDI_ChangeIrqFE_Port1(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqFE_Port1(s);
}

inline tDioPorts::tDI_ChangeIrqFE_Register& tDioPorts::tDI_ChangeIrqFE_Register::setDI_ChangeIrqFE_Port2(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqFE_Register::getDI_ChangeIrqFE_Port2(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::writeDI_ChangeIrqFE_Port2(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqFE_Port2(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqFE_Register::readDI_ChangeIrqFE_Port2(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqFE_Port2(s);
}

inline tDioPorts::tDI_ChangeIrqFE_Register& tDioPorts::tDI_ChangeIrqFE_Register::setDI_ChangeIrqFE_Port3(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDI_ChangeIrqFE_Register::getDI_ChangeIrqFE_Port3(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline void tDioPorts::tDI_ChangeIrqFE_Register::writeDI_ChangeIrqFE_Port3(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_ChangeIrqFE_Port3(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDI_ChangeIrqFE_Register::readDI_ChangeIrqFE_Port3(nMDBG::tStatus2* s)
{
   return getDI_ChangeIrqFE_Port3(s);
}

inline tDioPorts::tStatic_Digital_Input_Register::tStatic_Digital_Input_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tStatic_Digital_Input_Register::tRegisterMap* tDioPorts::tStatic_Digital_Input_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tStatic_Digital_Input_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tDioPorts::tStatic_Digital_Input_Register& tDioPorts::tStatic_Digital_Input_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tStatic_Digital_Input_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tDioPorts::tStatic_Digital_Input_Register& tDioPorts::tStatic_Digital_Input_Register::setDIO_StaticInputValue_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::getDIO_StaticInputValue_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::readDIO_StaticInputValue_Port0(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDIO_StaticInputValue_Port0(s);
}

inline tDioPorts::tStatic_Digital_Input_Register& tDioPorts::tStatic_Digital_Input_Register::setDIO_StaticInputValue_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::getDIO_StaticInputValue_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::readDIO_StaticInputValue_Port1(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDIO_StaticInputValue_Port1(s);
}

inline tDioPorts::tStatic_Digital_Input_Register& tDioPorts::tStatic_Digital_Input_Register::setDIO_StaticInputValue_Port2(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::getDIO_StaticInputValue_Port2(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::readDIO_StaticInputValue_Port2(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDIO_StaticInputValue_Port2(s);
}

inline tDioPorts::tStatic_Digital_Input_Register& tDioPorts::tStatic_Digital_Input_Register::setDIO_StaticInputValue_Port3(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::getDIO_StaticInputValue_Port3(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline u32 tDioPorts::tStatic_Digital_Input_Register::readDIO_StaticInputValue_Port3(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDIO_StaticInputValue_Port3(s);
}

inline tDioPorts::tStatic_Digital_Output_Register::tStatic_Digital_Output_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tStatic_Digital_Output_Register::tRegisterMap* tDioPorts::tStatic_Digital_Output_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tStatic_Digital_Output_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tStatic_Digital_Output_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tStatic_Digital_Output_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tStatic_Digital_Output_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tStatic_Digital_Output_Register& tDioPorts::tStatic_Digital_Output_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Output_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tStatic_Digital_Output_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tStatic_Digital_Output_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tStatic_Digital_Output_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tStatic_Digital_Output_Register& tDioPorts::tStatic_Digital_Output_Register::setDIO_StaticOutputValue_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Output_Register::getDIO_StaticOutputValue_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline void tDioPorts::tStatic_Digital_Output_Register::writeDIO_StaticOutputValue_Port0(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIO_StaticOutputValue_Port0(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tStatic_Digital_Output_Register::readDIO_StaticOutputValue_Port0(nMDBG::tStatus2* s)
{
   return getDIO_StaticOutputValue_Port0(s);
}

inline tDioPorts::tStatic_Digital_Output_Register& tDioPorts::tStatic_Digital_Output_Register::setDIO_StaticOutputValue_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Output_Register::getDIO_StaticOutputValue_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline void tDioPorts::tStatic_Digital_Output_Register::writeDIO_StaticOutputValue_Port1(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIO_StaticOutputValue_Port1(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tStatic_Digital_Output_Register::readDIO_StaticOutputValue_Port1(nMDBG::tStatus2* s)
{
   return getDIO_StaticOutputValue_Port1(s);
}

inline tDioPorts::tStatic_Digital_Output_Register& tDioPorts::tStatic_Digital_Output_Register::setDIO_StaticOutputValue_Port2(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Output_Register::getDIO_StaticOutputValue_Port2(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline void tDioPorts::tStatic_Digital_Output_Register::writeDIO_StaticOutputValue_Port2(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIO_StaticOutputValue_Port2(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tStatic_Digital_Output_Register::readDIO_StaticOutputValue_Port2(nMDBG::tStatus2* s)
{
   return getDIO_StaticOutputValue_Port2(s);
}

inline tDioPorts::tStatic_Digital_Output_Register& tDioPorts::tStatic_Digital_Output_Register::setDIO_StaticOutputValue_Port3(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tStatic_Digital_Output_Register::getDIO_StaticOutputValue_Port3(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline void tDioPorts::tStatic_Digital_Output_Register::writeDIO_StaticOutputValue_Port3(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIO_StaticOutputValue_Port3(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tStatic_Digital_Output_Register::readDIO_StaticOutputValue_Port3(nMDBG::tStatus2* s)
{
   return getDIO_StaticOutputValue_Port3(s);
}

inline tDioPorts::tDIO_Direction_Register::tDIO_Direction_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDIO_Direction_Register::tRegisterMap* tDioPorts::tDIO_Direction_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDIO_Direction_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDIO_Direction_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDIO_Direction_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDIO_Direction_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDIO_Direction_Register& tDioPorts::tDIO_Direction_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDIO_Direction_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDIO_Direction_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDIO_Direction_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDIO_Direction_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDIO_Direction_Register& tDioPorts::tDIO_Direction_Register::setDIODirection_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDIO_Direction_Register::getDIODirection_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline void tDioPorts::tDIO_Direction_Register::writeDIODirection_Port0(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIODirection_Port0(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDIO_Direction_Register::readDIODirection_Port0(nMDBG::tStatus2* s)
{
   return getDIODirection_Port0(s);
}

inline tDioPorts::tDIO_Direction_Register& tDioPorts::tDIO_Direction_Register::setDIODirection_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDIO_Direction_Register::getDIODirection_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline void tDioPorts::tDIO_Direction_Register::writeDIODirection_Port1(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIODirection_Port1(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDIO_Direction_Register::readDIODirection_Port1(nMDBG::tStatus2* s)
{
   return getDIODirection_Port1(s);
}

inline tDioPorts::tDIO_Direction_Register& tDioPorts::tDIO_Direction_Register::setDIODirection_Port2(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDIO_Direction_Register::getDIODirection_Port2(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline void tDioPorts::tDIO_Direction_Register::writeDIODirection_Port2(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIODirection_Port2(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDIO_Direction_Register::readDIODirection_Port2(nMDBG::tStatus2* s)
{
   return getDIODirection_Port2(s);
}

inline tDioPorts::tDIO_Direction_Register& tDioPorts::tDIO_Direction_Register::setDIODirection_Port3(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDIO_Direction_Register::getDIODirection_Port3(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline void tDioPorts::tDIO_Direction_Register::writeDIODirection_Port3(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDIODirection_Port3(fieldValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDIO_Direction_Register::readDIODirection_Port3(nMDBG::tStatus2* s)
{
   return getDIODirection_Port3(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1::tDI_FilterRegister_Port0and1()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDI_FilterRegister_Port0and1::tRegisterMap* tDioPorts::tDI_FilterRegister_Port0and1::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDI_FilterRegister_Port0and1::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDI_FilterRegister_Port0and1::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDI_FilterRegister_Port0and1::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffc) | ((u32(fieldValue) << 0x0) & ~0xfffffffc);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffffffc) >> 0x0);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line0(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line0(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffff3) | ((u32(fieldValue) << 0x2) & ~0xfffffff3);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffffff3) >> 0x2);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line1(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line1(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffffcf) | ((u32(fieldValue) << 0x4) & ~0xffffffcf);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffffffcf) >> 0x4);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line2(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line2(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff3f) | ((u32(fieldValue) << 0x6) & ~0xffffff3f);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffffff3f) >> 0x6);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line3(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line3(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffcff) | ((u32(fieldValue) << 0x8) & ~0xfffffcff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffffcff) >> 0x8);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line4(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line4(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffff3ff) | ((u32(fieldValue) << 0xa) & ~0xfffff3ff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffff3ff) >> 0xa);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line5(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line5(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffcfff) | ((u32(fieldValue) << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line6(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line6(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port0_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff3fff) | ((u32(fieldValue) << 0xe) & ~0xffff3fff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port0_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffff3fff) >> 0xe);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port0_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port0_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port0_Line7(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port0_Line7(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffcffff) | ((u32(fieldValue) << 0x10) & ~0xfffcffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffcffff) >> 0x10);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line0(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line0(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfff3ffff) | ((u32(fieldValue) << 0x12) & ~0xfff3ffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfff3ffff) >> 0x12);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line1(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line1(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffcfffff) | ((u32(fieldValue) << 0x14) & ~0xffcfffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffcfffff) >> 0x14);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line2(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line2(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff3fffff) | ((u32(fieldValue) << 0x16) & ~0xff3fffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xff3fffff) >> 0x16);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line3(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line3(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfcffffff) | ((u32(fieldValue) << 0x18) & ~0xfcffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfcffffff) >> 0x18);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line4(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line4(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xf3ffffff) | ((u32(fieldValue) << 0x1a) & ~0xf3ffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xf3ffffff) >> 0x1a);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line5(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line5(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xcfffffff) | ((u32(fieldValue) << 0x1c) & ~0xcfffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xcfffffff) >> 0x1c);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line6(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line6(s);
}

inline tDioPorts::tDI_FilterRegister_Port0and1& tDioPorts::tDI_FilterRegister_Port0and1::setDI_Filter_Select_Port1_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x3fffffff) | ((u32(fieldValue) << 0x1e) & ~0x3fffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::getDI_Filter_Select_Port1_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0x3fffffff) >> 0x1e);
}

inline void tDioPorts::tDI_FilterRegister_Port0and1::writeDI_Filter_Select_Port1_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port1_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port0and1::readDI_Filter_Select_Port1_Line7(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port1_Line7(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3::tDI_FilterRegister_Port2and3()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDI_FilterRegister_Port2and3::tRegisterMap* tDioPorts::tDI_FilterRegister_Port2and3::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDI_FilterRegister_Port2and3::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDI_FilterRegister_Port2and3::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDI_FilterRegister_Port2and3::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffc) | ((u32(fieldValue) << 0x0) & ~0xfffffffc);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffffffc) >> 0x0);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line0(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line0(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffff3) | ((u32(fieldValue) << 0x2) & ~0xfffffff3);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffffff3) >> 0x2);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line1(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line1(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffffcf) | ((u32(fieldValue) << 0x4) & ~0xffffffcf);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffffffcf) >> 0x4);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line2(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line2(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff3f) | ((u32(fieldValue) << 0x6) & ~0xffffff3f);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffffff3f) >> 0x6);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line3(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line3(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffcff) | ((u32(fieldValue) << 0x8) & ~0xfffffcff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffffcff) >> 0x8);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line4(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line4(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffff3ff) | ((u32(fieldValue) << 0xa) & ~0xfffff3ff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffff3ff) >> 0xa);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line5(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line5(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffcfff) | ((u32(fieldValue) << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line6(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line6(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port2_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff3fff) | ((u32(fieldValue) << 0xe) & ~0xffff3fff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port2_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffff3fff) >> 0xe);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port2_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port2_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port2_Line7(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port2_Line7(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffcffff) | ((u32(fieldValue) << 0x10) & ~0xfffcffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfffcffff) >> 0x10);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line0(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line0(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line0(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfff3ffff) | ((u32(fieldValue) << 0x12) & ~0xfff3ffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfff3ffff) >> 0x12);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line1(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line1(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line1(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffcfffff) | ((u32(fieldValue) << 0x14) & ~0xffcfffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xffcfffff) >> 0x14);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line2(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line2(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line2(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff3fffff) | ((u32(fieldValue) << 0x16) & ~0xff3fffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xff3fffff) >> 0x16);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line3(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line3(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line3(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfcffffff) | ((u32(fieldValue) << 0x18) & ~0xfcffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xfcffffff) >> 0x18);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line4(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line4(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line4(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xf3ffffff) | ((u32(fieldValue) << 0x1a) & ~0xf3ffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xf3ffffff) >> 0x1a);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line5(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line5(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line5(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xcfffffff) | ((u32(fieldValue) << 0x1c) & ~0xcfffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0xcfffffff) >> 0x1c);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line6(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line6(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line6(s);
}

inline tDioPorts::tDI_FilterRegister_Port2and3& tDioPorts::tDI_FilterRegister_Port2and3::setDI_Filter_Select_Port3_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x3fffffff) | ((u32(fieldValue) << 0x1e) & ~0x3fffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::getDI_Filter_Select_Port3_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDI_Filter_Select_t((_softCopy & ~0x3fffffff) >> 0x1e);
}

inline void tDioPorts::tDI_FilterRegister_Port2and3::writeDI_Filter_Select_Port3_Line7(nDioPorts::tDI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDI_Filter_Select_Port3_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDI_Filter_Select_t tDioPorts::tDI_FilterRegister_Port2and3::readDI_Filter_Select_Port3_Line7(nMDBG::tStatus2* s)
{
   return getDI_Filter_Select_Port3_Line7(s);
}

inline tDioPorts::tDO_WDT_SafeStateRegister::tDO_WDT_SafeStateRegister()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDO_WDT_SafeStateRegister::tRegisterMap* tDioPorts::tDO_WDT_SafeStateRegister::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDO_WDT_SafeStateRegister::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDO_WDT_SafeStateRegister::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & ~(u32(0x1) << (0x0 + position))) | (u32(bitValue) << (0x0 + position));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2*) const
{
   return (_softCopy >> (0x0 + position)) & 0x1;
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port0(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port0(fieldValue, s);
   flush(s, force);
}
inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port0(position, bitValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port0(nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port0(s);
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port0(position, s);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & ~(u32(0x1) << (0x8 + position))) | (u32(bitValue) << (0x8 + position));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2*) const
{
   return (_softCopy >> (0x8 + position)) & 0x1;
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port1(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port1(fieldValue, s);
   flush(s, force);
}
inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port1(position, bitValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port1(nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port1(s);
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port1(position, s);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port2(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port2(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port2(u32 position, tBoolean bitValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & ~(u32(0x1) << (0x10 + position))) | (u32(bitValue) << (0x10 + position));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port2(u32 position, nMDBG::tStatus2*) const
{
   return (_softCopy >> (0x10 + position)) & 0x1;
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port2(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port2(fieldValue, s);
   flush(s, force);
}
inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port2(u32 position, tBoolean bitValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port2(position, bitValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port2(nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port2(s);
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port2(u32 position, nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port2(position, s);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port3(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port3(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline tDioPorts::tDO_WDT_SafeStateRegister& tDioPorts::tDO_WDT_SafeStateRegister::setDO_WDT_SafeStateValue_Port3(u32 position, tBoolean bitValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & ~(u32(0x1) << (0x18 + position))) | (u32(bitValue) << (0x18 + position));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::getDO_WDT_SafeStateValue_Port3(u32 position, nMDBG::tStatus2*) const
{
   return (_softCopy >> (0x18 + position)) & 0x1;
}

inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port3(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port3(fieldValue, s);
   flush(s, force);
}
inline void tDioPorts::tDO_WDT_SafeStateRegister::writeDO_WDT_SafeStateValue_Port3(u32 position, tBoolean bitValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_SafeStateValue_Port3(position, bitValue, s);
   flush(s, force);
}
inline u32 tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port3(nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port3(s);
}

inline tBoolean tDioPorts::tDO_WDT_SafeStateRegister::readDO_WDT_SafeStateValue_Port3(u32 position, nMDBG::tStatus2* s)
{
   return getDO_WDT_SafeStateValue_Port3(position, s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::tDO_WDT_ModeSelect_Port0and1_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::tRegisterMap* tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffc) | ((u32(fieldValue) << 0x0) & ~0xfffffffc);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffffffc) >> 0x0);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line0(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line0(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffff3) | ((u32(fieldValue) << 0x2) & ~0xfffffff3);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffffff3) >> 0x2);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line1(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line1(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffffcf) | ((u32(fieldValue) << 0x4) & ~0xffffffcf);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffffffcf) >> 0x4);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line2(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line2(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff3f) | ((u32(fieldValue) << 0x6) & ~0xffffff3f);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffffff3f) >> 0x6);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line3(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line3(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffcff) | ((u32(fieldValue) << 0x8) & ~0xfffffcff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffffcff) >> 0x8);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line4(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line4(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffff3ff) | ((u32(fieldValue) << 0xa) & ~0xfffff3ff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffff3ff) >> 0xa);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line5(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line5(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffcfff) | ((u32(fieldValue) << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line6(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line6(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort0_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff3fff) | ((u32(fieldValue) << 0xe) & ~0xffff3fff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort0_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffff3fff) >> 0xe);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort0_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort0_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort0_Line7(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort0_Line7(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffcffff) | ((u32(fieldValue) << 0x10) & ~0xfffcffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffcffff) >> 0x10);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line0(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line0(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfff3ffff) | ((u32(fieldValue) << 0x12) & ~0xfff3ffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfff3ffff) >> 0x12);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line1(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line1(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffcfffff) | ((u32(fieldValue) << 0x14) & ~0xffcfffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffcfffff) >> 0x14);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line2(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line2(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff3fffff) | ((u32(fieldValue) << 0x16) & ~0xff3fffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xff3fffff) >> 0x16);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line3(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line3(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfcffffff) | ((u32(fieldValue) << 0x18) & ~0xfcffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfcffffff) >> 0x18);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line4(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line4(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xf3ffffff) | ((u32(fieldValue) << 0x1a) & ~0xf3ffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xf3ffffff) >> 0x1a);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line5(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line5(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xcfffffff) | ((u32(fieldValue) << 0x1c) & ~0xcfffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xcfffffff) >> 0x1c);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line6(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line6(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register& tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::setDO_WDT_ModePort1_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x3fffffff) | ((u32(fieldValue) << 0x1e) & ~0x3fffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::getDO_WDT_ModePort1_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0x3fffffff) >> 0x1e);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::writeDO_WDT_ModePort1_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort1_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port0and1_Register::readDO_WDT_ModePort1_Line7(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort1_Line7(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::tDO_WDT_ModeSelect_Port2and3_Register()
{
   _softCopy = u32(0x0);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::tRegisterMap* tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::registerMap(void)
{
   return _regMap;
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tDioPorts::tId)kId, s);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tDioPorts::tId)kId, s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffc) | ((u32(fieldValue) << 0x0) & ~0xfffffffc);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffffffc) >> 0x0);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line0(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line0(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffff3) | ((u32(fieldValue) << 0x2) & ~0xfffffff3);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffffff3) >> 0x2);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line1(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line1(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffffcf) | ((u32(fieldValue) << 0x4) & ~0xffffffcf);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffffffcf) >> 0x4);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line2(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line2(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff3f) | ((u32(fieldValue) << 0x6) & ~0xffffff3f);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffffff3f) >> 0x6);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line3(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line3(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffcff) | ((u32(fieldValue) << 0x8) & ~0xfffffcff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffffcff) >> 0x8);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line4(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line4(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffff3ff) | ((u32(fieldValue) << 0xa) & ~0xfffff3ff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffff3ff) >> 0xa);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line5(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line5(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffcfff) | ((u32(fieldValue) << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line6(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line6(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort2_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff3fff) | ((u32(fieldValue) << 0xe) & ~0xffff3fff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort2_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffff3fff) >> 0xe);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort2_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort2_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort2_Line7(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort2_Line7(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffcffff) | ((u32(fieldValue) << 0x10) & ~0xfffcffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line0(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfffcffff) >> 0x10);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line0(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line0(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line0(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line0(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfff3ffff) | ((u32(fieldValue) << 0x12) & ~0xfff3ffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line1(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfff3ffff) >> 0x12);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line1(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line1(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line1(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line1(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffcfffff) | ((u32(fieldValue) << 0x14) & ~0xffcfffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line2(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xffcfffff) >> 0x14);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line2(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line2(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line2(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line2(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff3fffff) | ((u32(fieldValue) << 0x16) & ~0xff3fffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line3(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xff3fffff) >> 0x16);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line3(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line3(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line3(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line3(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfcffffff) | ((u32(fieldValue) << 0x18) & ~0xfcffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line4(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xfcffffff) >> 0x18);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line4(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line4(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line4(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line4(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xf3ffffff) | ((u32(fieldValue) << 0x1a) & ~0xf3ffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line5(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xf3ffffff) >> 0x1a);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line5(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line5(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line5(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line5(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xcfffffff) | ((u32(fieldValue) << 0x1c) & ~0xcfffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line6(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0xcfffffff) >> 0x1c);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line6(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line6(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line6(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line6(s);
}

inline tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register& tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::setDO_WDT_ModePort3_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x3fffffff) | ((u32(fieldValue) << 0x1e) & ~0x3fffffff);
   setRegister(newValue, s);
   return *this;
}

inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::getDO_WDT_ModePort3_Line7(nMDBG::tStatus2*) const
{
   return nDioPorts::tDO_WDT_Mode_t((_softCopy & ~0x3fffffff) >> 0x1e);
}

inline void tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::writeDO_WDT_ModePort3_Line7(nDioPorts::tDO_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setDO_WDT_ModePort3_Line7(fieldValue, s);
   flush(s, force);
}
inline nDioPorts::tDO_WDT_Mode_t tDioPorts::tDO_WDT_ModeSelect_Port2and3_Register::readDO_WDT_ModePort3_Line7(nMDBG::tStatus2* s)
{
   return getDO_WDT_ModePort3_Line7(s);
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

