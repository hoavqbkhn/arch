// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tPfiPorts_ipp___
#define ___tPfiPorts_ipp___

#ifndef ___tPfiPorts_h___
#include "tPfiPorts.h"
#endif

#ifndef ___nNIMXRegistermap_tStatus2Ptr_ipp___
#define ___nNIMXRegistermap_tStatus2Ptr_ipp___

typedef nMDBG::tStatus2 nNIMXRegisterMap120_tStatus2;


namespace nNIMXRegisterMap120 {
namespace {

typedef nNIMXRegisterMap120_tStatus2 tStatus2;

inline void setStatus(tStatus2* s, tStatus newStatus)
{
   if (s) s->setCode(newStatus);
}

inline tStatus* toPALStatusPtr(tStatus2* s)
{
   return s ? s->operator tStatus*() : ((tStatus*)NULL);
}

inline tBoolean statusIsFatal(tStatus2* s)
{
   return s && s->isFatal();
}

} // unnamed namespace
} // namespace nNIMXRegisterMap120

#endif // ___nNIMXRegistermap_tStatus2Ptr_ipp___


inline void tPfiPorts::tReg8IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u8 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write8(offset, value);
}
inline u8 tPfiPorts::tReg8IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u8 value = (u8)~0;
   if (s && s->isFatal()) return value;
   value = (u8)addrSpace.read8(offset);
   return value;
}

inline void tPfiPorts::tReg16IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u16 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write16(offset, value);
}

inline u16 tPfiPorts::tReg16IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u16 value = (u16)~0;
   if (s && s->isFatal()) return value;
   value = (u16)addrSpace.read16(offset);
   return value;
}

inline void tPfiPorts::tReg32IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u32 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write32(offset, value);
}

inline u32 tPfiPorts::tReg32IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u32 value = (u32)~0;
   if (s && s->isFatal()) return value;
   value = addrSpace.read32(offset);
   return value;
}

inline tBusSpaceReference tPfiPorts::getBusSpaceReference(void) const
{
   return _addrSpace;
}

inline void tPfiPorts::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _addressOffset = value;
}
inline u32 tPfiPorts::getAddressOffset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return 0UL;
   return _addressOffset;
}
inline tBoolean tPfiPorts::isDirty(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return kFalse;
   u32 regId = id&0x01FFFFFF;
   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return kFalse;
   }

   return _dirtyVector[regId];
}

inline void tPfiPorts::markDirty(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   u32 regId = id&0x01FFFFFF;

   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return;
   }

   _dirtyVector[regId] = 1;
}

inline void tPfiPorts::markClean(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   u32 regId = id&0x01FFFFFF;

   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return;
   }

   _dirtyVector[regId] = 0;
}

inline void tPfiPorts::markDirty(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   unsigned int i;
   for (i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 1;
   }
}

inline void tPfiPorts::markClean(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }
}

inline tPfiPorts::tPFI_ChangeDetectLatched_Register::tPFI_ChangeDetectLatched_Register()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tPFI_ChangeDetectLatched_Register::tRegisterMap* tPfiPorts::tPFI_ChangeDetectLatched_Register::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_ChangeDetectLatched_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tPfiPorts::tPFI_ChangeDetectLatched_Register& tPfiPorts::tPFI_ChangeDetectLatched_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tPfiPorts::tPFI_ChangeDetectLatched_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_ChangeDetectLatched_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u16 tPfiPorts::tPFI_ChangeDetectLatched_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tPfiPorts::tPFI_ChangeDetectLatched_Register& tPfiPorts::tPFI_ChangeDetectLatched_Register::setPFI_ChangeDetectLatched_Port0(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff00) | ((u16(fieldValue) << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tPFI_ChangeDetectLatched_Register::getPFI_ChangeDetectLatched_Port0(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff00) >> 0x0);
}

inline u16 tPfiPorts::tPFI_ChangeDetectLatched_Register::readPFI_ChangeDetectLatched_Port0(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPFI_ChangeDetectLatched_Port0(s);
}

inline tPfiPorts::tPFI_ChangeDetectLatched_Register& tPfiPorts::tPFI_ChangeDetectLatched_Register::setPFI_ChangeDetectLatched_Port1(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff) | ((u16(fieldValue) << 0x8) & ~0xff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tPFI_ChangeDetectLatched_Register::getPFI_ChangeDetectLatched_Port1(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff) >> 0x8);
}

inline u16 tPfiPorts::tPFI_ChangeDetectLatched_Register::readPFI_ChangeDetectLatched_Port1(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPFI_ChangeDetectLatched_Port1(s);
}

inline tPfiPorts::tPFI_ChangeIrq_Register::tPFI_ChangeIrq_Register()
{
   _softCopy = u32(0x0);
}

inline tPfiPorts::tPFI_ChangeIrq_Register::tRegisterMap* tPfiPorts::tPFI_ChangeIrq_Register::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_ChangeIrq_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_ChangeIrq_Register& tPfiPorts::tPFI_ChangeIrq_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tPfiPorts::tPFI_ChangeIrq_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tPfiPorts::tPFI_ChangeIrq_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_ChangeIrq_Register& tPfiPorts::tPFI_ChangeIrq_Register::setPFI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline u32 tPfiPorts::tPFI_ChangeIrq_Register::getPFI_ChangeIrqRE_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff00) >> 0x0);
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::writePFI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_ChangeIrqRE_Port0(fieldValue, s);
   flush(s, force);
}
inline u32 tPfiPorts::tPFI_ChangeIrq_Register::readPFI_ChangeIrqRE_Port0(nMDBG::tStatus2* s)
{
   return getPFI_ChangeIrqRE_Port0(s);
}

inline tPfiPorts::tPFI_ChangeIrq_Register& tPfiPorts::tPFI_ChangeIrq_Register::setPFI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tPfiPorts::tPFI_ChangeIrq_Register::getPFI_ChangeIrqRE_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::writePFI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_ChangeIrqRE_Port1(fieldValue, s);
   flush(s, force);
}
inline u32 tPfiPorts::tPFI_ChangeIrq_Register::readPFI_ChangeIrqRE_Port1(nMDBG::tStatus2* s)
{
   return getPFI_ChangeIrqRE_Port1(s);
}

inline tPfiPorts::tPFI_ChangeIrq_Register& tPfiPorts::tPFI_ChangeIrq_Register::setPFI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff00ffff) | ((u32(fieldValue) << 0x10) & ~0xff00ffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tPfiPorts::tPFI_ChangeIrq_Register::getPFI_ChangeIrqFE_Port0(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xff00ffff) >> 0x10);
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::writePFI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_ChangeIrqFE_Port0(fieldValue, s);
   flush(s, force);
}
inline u32 tPfiPorts::tPFI_ChangeIrq_Register::readPFI_ChangeIrqFE_Port0(nMDBG::tStatus2* s)
{
   return getPFI_ChangeIrqFE_Port0(s);
}

inline tPfiPorts::tPFI_ChangeIrq_Register& tPfiPorts::tPFI_ChangeIrq_Register::setPFI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff) | ((u32(fieldValue) << 0x18) & ~0xffffff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tPfiPorts::tPFI_ChangeIrq_Register::getPFI_ChangeIrqFE_Port1(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffffff) >> 0x18);
}

inline void tPfiPorts::tPFI_ChangeIrq_Register::writePFI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_ChangeIrqFE_Port1(fieldValue, s);
   flush(s, force);
}
inline u32 tPfiPorts::tPFI_ChangeIrq_Register::readPFI_ChangeIrqFE_Port1(nMDBG::tStatus2* s)
{
   return getPFI_ChangeIrqFE_Port1(s);
}

inline tPfiPorts::tStatic_Digital_Input_Register::tStatic_Digital_Input_Register()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tStatic_Digital_Input_Register::tRegisterMap* tPfiPorts::tStatic_Digital_Input_Register::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tStatic_Digital_Input_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tPfiPorts::tStatic_Digital_Input_Register& tPfiPorts::tStatic_Digital_Input_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tPfiPorts::tStatic_Digital_Input_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tStatic_Digital_Input_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u16 tPfiPorts::tStatic_Digital_Input_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tPfiPorts::tStatic_Digital_Input_Register& tPfiPorts::tStatic_Digital_Input_Register::setPFI_StaticInputValue_Port0(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff00) | ((u16(fieldValue) << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tStatic_Digital_Input_Register::getPFI_StaticInputValue_Port0(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff00) >> 0x0);
}

inline u16 tPfiPorts::tStatic_Digital_Input_Register::readPFI_StaticInputValue_Port0(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPFI_StaticInputValue_Port0(s);
}

inline tPfiPorts::tStatic_Digital_Input_Register& tPfiPorts::tStatic_Digital_Input_Register::setPFI_StaticInputValue_Port1(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff) | ((u16(fieldValue) << 0x8) & ~0xff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tStatic_Digital_Input_Register::getPFI_StaticInputValue_Port1(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff) >> 0x8);
}

inline u16 tPfiPorts::tStatic_Digital_Input_Register::readPFI_StaticInputValue_Port1(nMDBG::tStatus2* s)
{
   refresh(s);
   return getPFI_StaticInputValue_Port1(s);
}

inline tPfiPorts::tStatic_Digital_Output_Register::tStatic_Digital_Output_Register()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tStatic_Digital_Output_Register::tRegisterMap* tPfiPorts::tStatic_Digital_Output_Register::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tStatic_Digital_Output_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tStatic_Digital_Output_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tStatic_Digital_Output_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tStatic_Digital_Output_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tStatic_Digital_Output_Register& tPfiPorts::tStatic_Digital_Output_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tPfiPorts::tStatic_Digital_Output_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tStatic_Digital_Output_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tStatic_Digital_Output_Register::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tPfiPorts::tStatic_Digital_Output_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tStatic_Digital_Output_Register& tPfiPorts::tStatic_Digital_Output_Register::setPFI_StaticOutputValue_Port0(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff00) | ((u16(fieldValue) << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tStatic_Digital_Output_Register::getPFI_StaticOutputValue_Port0(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff00) >> 0x0);
}

inline void tPfiPorts::tStatic_Digital_Output_Register::writePFI_StaticOutputValue_Port0(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_StaticOutputValue_Port0(fieldValue, s);
   flush(s, force);
}
inline u16 tPfiPorts::tStatic_Digital_Output_Register::readPFI_StaticOutputValue_Port0(nMDBG::tStatus2* s)
{
   return getPFI_StaticOutputValue_Port0(s);
}

inline tPfiPorts::tStatic_Digital_Output_Register& tPfiPorts::tStatic_Digital_Output_Register::setPFI_StaticOutputValue_Port1(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff) | ((u16(fieldValue) << 0x8) & ~0xff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tStatic_Digital_Output_Register::getPFI_StaticOutputValue_Port1(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff) >> 0x8);
}

inline void tPfiPorts::tStatic_Digital_Output_Register::writePFI_StaticOutputValue_Port1(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_StaticOutputValue_Port1(fieldValue, s);
   flush(s, force);
}
inline u16 tPfiPorts::tStatic_Digital_Output_Register::readPFI_StaticOutputValue_Port1(nMDBG::tStatus2* s)
{
   return getPFI_StaticOutputValue_Port1(s);
}

inline tPfiPorts::tPFI_Direction_Register::tPFI_Direction_Register()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tPFI_Direction_Register::tRegisterMap* tPfiPorts::tPFI_Direction_Register::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_Direction_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_Direction_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Direction_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Direction_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_Direction_Register& tPfiPorts::tPFI_Direction_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tPfiPorts::tPFI_Direction_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_Direction_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_Direction_Register::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tPfiPorts::tPFI_Direction_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_Direction_Register& tPfiPorts::tPFI_Direction_Register::setPFIDirection_Port0(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff00) | ((u16(fieldValue) << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tPFI_Direction_Register::getPFIDirection_Port0(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff00) >> 0x0);
}

inline void tPfiPorts::tPFI_Direction_Register::writePFIDirection_Port0(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFIDirection_Port0(fieldValue, s);
   flush(s, force);
}
inline u16 tPfiPorts::tPFI_Direction_Register::readPFIDirection_Port0(nMDBG::tStatus2* s)
{
   return getPFIDirection_Port0(s);
}

inline tPfiPorts::tPFI_Direction_Register& tPfiPorts::tPFI_Direction_Register::setPFIDirection_Port1(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff) | ((u16(fieldValue) << 0x8) & ~0xff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tPFI_Direction_Register::getPFIDirection_Port1(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff) >> 0x8);
}

inline void tPfiPorts::tPFI_Direction_Register::writePFIDirection_Port1(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFIDirection_Port1(fieldValue, s);
   flush(s, force);
}
inline u16 tPfiPorts::tPFI_Direction_Register::readPFIDirection_Port1(nMDBG::tStatus2* s)
{
   return getPFIDirection_Port1(s);
}

inline tPfiPorts::tPFI_OutputSelectRegister_t::tPFI_OutputSelectRegister_t(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = u8(0x0);
}

inline tPfiPorts::tPFI_OutputSelectRegister_t::tPFI_OutputSelectRegister_t()
 : kOffset((u32)~0),
   kId((u32)~0)
{
   _softCopy = u8(0x0);
}

inline void tPfiPorts::tPFI_OutputSelectRegister_t::initialize(u32 offset, u32 id)
{
   u32* mutableOffset = const_cast<u32*>(&this->kOffset);
   u32* mutableId     = const_cast<u32*>(&this->kId);
   *mutableOffset = offset;
   *mutableId = id;
}

inline tPfiPorts::tPFI_OutputSelectRegister_t::tRegisterMap* tPfiPorts::tPFI_OutputSelectRegister_t::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_OutputSelectRegister_t::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_OutputSelectRegister_t::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_OutputSelectRegister_t::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_OutputSelectRegister_t::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_OutputSelectRegister_t& tPfiPorts::tPFI_OutputSelectRegister_t::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u8 tPfiPorts::tPFI_OutputSelectRegister_t::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_OutputSelectRegister_t::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u8(0xff);
      _softCopy |= u8(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_OutputSelectRegister_t::writeRegister(u8 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u8 tPfiPorts::tPFI_OutputSelectRegister_t::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_OutputSelectRegister_t& tPfiPorts::tPFI_OutputSelectRegister_t::setPFI_i_Output_Select(nPfiPorts::tPFI_Output_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = (_softCopy & 0x80) | ((u8(fieldValue) << 0x0) & ~0x80);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Output_Select_t tPfiPorts::tPFI_OutputSelectRegister_t::getPFI_i_Output_Select(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Output_Select_t((_softCopy & ~0x80) >> 0x0);
}

inline void tPfiPorts::tPFI_OutputSelectRegister_t::writePFI_i_Output_Select(nPfiPorts::tPFI_Output_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_i_Output_Select(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Output_Select_t tPfiPorts::tPFI_OutputSelectRegister_t::readPFI_i_Output_Select(nMDBG::tStatus2* s)
{
   return getPFI_i_Output_Select(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Lo::tPFI_Filter_Register_Port0Lo()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Lo::tRegisterMap* tPfiPorts::tPFI_Filter_Register_Port0Lo::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_Filter_Register_Port0Lo::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Lo& tPfiPorts::tPFI_Filter_Register_Port0Lo::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port0Lo::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port0Lo::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_Filter_Register_Port0Lo& tPfiPorts::tPFI_Filter_Register_Port0Lo::setPFI_Filter_Select_Port0_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfff8) | ((u16(fieldValue) << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::getPFI_Filter_Select_Port0_Line0(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xfff8) >> 0x0);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::writePFI_Filter_Select_Port0_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line0(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::readPFI_Filter_Select_Port0_Line0(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line0(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Lo& tPfiPorts::tPFI_Filter_Register_Port0Lo::setPFI_Filter_Select_Port0_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff8f) | ((u16(fieldValue) << 0x4) & ~0xff8f);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::getPFI_Filter_Select_Port0_Line1(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xff8f) >> 0x4);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::writePFI_Filter_Select_Port0_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line1(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::readPFI_Filter_Select_Port0_Line1(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line1(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Lo& tPfiPorts::tPFI_Filter_Register_Port0Lo::setPFI_Filter_Select_Port0_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xf8ff) | ((u16(fieldValue) << 0x8) & ~0xf8ff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::getPFI_Filter_Select_Port0_Line2(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xf8ff) >> 0x8);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::writePFI_Filter_Select_Port0_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line2(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::readPFI_Filter_Select_Port0_Line2(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line2(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Lo& tPfiPorts::tPFI_Filter_Register_Port0Lo::setPFI_Filter_Select_Port0_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0x8fff) | ((u16(fieldValue) << 0xc) & ~0x8fff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::getPFI_Filter_Select_Port0_Line3(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0x8fff) >> 0xc);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Lo::writePFI_Filter_Select_Port0_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line3(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Lo::readPFI_Filter_Select_Port0_Line3(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line3(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Hi::tPFI_Filter_Register_Port0Hi()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Hi::tRegisterMap* tPfiPorts::tPFI_Filter_Register_Port0Hi::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_Filter_Register_Port0Hi::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Hi& tPfiPorts::tPFI_Filter_Register_Port0Hi::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port0Hi::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port0Hi::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_Filter_Register_Port0Hi& tPfiPorts::tPFI_Filter_Register_Port0Hi::setPFI_Filter_Select_Port0_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfff8) | ((u16(fieldValue) << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::getPFI_Filter_Select_Port0_Line4(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xfff8) >> 0x0);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::writePFI_Filter_Select_Port0_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line4(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::readPFI_Filter_Select_Port0_Line4(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line4(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Hi& tPfiPorts::tPFI_Filter_Register_Port0Hi::setPFI_Filter_Select_Port0_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff8f) | ((u16(fieldValue) << 0x4) & ~0xff8f);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::getPFI_Filter_Select_Port0_Line5(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xff8f) >> 0x4);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::writePFI_Filter_Select_Port0_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line5(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::readPFI_Filter_Select_Port0_Line5(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line5(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Hi& tPfiPorts::tPFI_Filter_Register_Port0Hi::setPFI_Filter_Select_Port0_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xf8ff) | ((u16(fieldValue) << 0x8) & ~0xf8ff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::getPFI_Filter_Select_Port0_Line6(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xf8ff) >> 0x8);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::writePFI_Filter_Select_Port0_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line6(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::readPFI_Filter_Select_Port0_Line6(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line6(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port0Hi& tPfiPorts::tPFI_Filter_Register_Port0Hi::setPFI_Filter_Select_Port0_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0x8fff) | ((u16(fieldValue) << 0xc) & ~0x8fff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::getPFI_Filter_Select_Port0_Line7(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0x8fff) >> 0xc);
}

inline void tPfiPorts::tPFI_Filter_Register_Port0Hi::writePFI_Filter_Select_Port0_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port0_Line7(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port0Hi::readPFI_Filter_Select_Port0_Line7(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port0_Line7(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Lo::tPFI_Filter_Register_Port1Lo()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Lo::tRegisterMap* tPfiPorts::tPFI_Filter_Register_Port1Lo::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_Filter_Register_Port1Lo::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Lo& tPfiPorts::tPFI_Filter_Register_Port1Lo::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port1Lo::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port1Lo::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_Filter_Register_Port1Lo& tPfiPorts::tPFI_Filter_Register_Port1Lo::setPFI_Filter_Select_Port1_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfff8) | ((u16(fieldValue) << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::getPFI_Filter_Select_Port1_Line0(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xfff8) >> 0x0);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::writePFI_Filter_Select_Port1_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line0(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::readPFI_Filter_Select_Port1_Line0(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line0(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Lo& tPfiPorts::tPFI_Filter_Register_Port1Lo::setPFI_Filter_Select_Port1_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff8f) | ((u16(fieldValue) << 0x4) & ~0xff8f);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::getPFI_Filter_Select_Port1_Line1(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xff8f) >> 0x4);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::writePFI_Filter_Select_Port1_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line1(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::readPFI_Filter_Select_Port1_Line1(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line1(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Lo& tPfiPorts::tPFI_Filter_Register_Port1Lo::setPFI_Filter_Select_Port1_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xf8ff) | ((u16(fieldValue) << 0x8) & ~0xf8ff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::getPFI_Filter_Select_Port1_Line2(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xf8ff) >> 0x8);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::writePFI_Filter_Select_Port1_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line2(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::readPFI_Filter_Select_Port1_Line2(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line2(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Lo& tPfiPorts::tPFI_Filter_Register_Port1Lo::setPFI_Filter_Select_Port1_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0x8fff) | ((u16(fieldValue) << 0xc) & ~0x8fff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::getPFI_Filter_Select_Port1_Line3(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0x8fff) >> 0xc);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Lo::writePFI_Filter_Select_Port1_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line3(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Lo::readPFI_Filter_Select_Port1_Line3(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line3(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Hi::tPFI_Filter_Register_Port1Hi()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Hi::tRegisterMap* tPfiPorts::tPFI_Filter_Register_Port1Hi::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_Filter_Register_Port1Hi::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Hi& tPfiPorts::tPFI_Filter_Register_Port1Hi::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port1Hi::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tPfiPorts::tPFI_Filter_Register_Port1Hi::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_Filter_Register_Port1Hi& tPfiPorts::tPFI_Filter_Register_Port1Hi::setPFI_Filter_Select_Port1_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfff8) | ((u16(fieldValue) << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::getPFI_Filter_Select_Port1_Line4(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xfff8) >> 0x0);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::writePFI_Filter_Select_Port1_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line4(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::readPFI_Filter_Select_Port1_Line4(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line4(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Hi& tPfiPorts::tPFI_Filter_Register_Port1Hi::setPFI_Filter_Select_Port1_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff8f) | ((u16(fieldValue) << 0x4) & ~0xff8f);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::getPFI_Filter_Select_Port1_Line5(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xff8f) >> 0x4);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::writePFI_Filter_Select_Port1_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line5(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::readPFI_Filter_Select_Port1_Line5(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line5(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Hi& tPfiPorts::tPFI_Filter_Register_Port1Hi::setPFI_Filter_Select_Port1_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xf8ff) | ((u16(fieldValue) << 0x8) & ~0xf8ff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::getPFI_Filter_Select_Port1_Line6(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0xf8ff) >> 0x8);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::writePFI_Filter_Select_Port1_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line6(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::readPFI_Filter_Select_Port1_Line6(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line6(s);
}

inline tPfiPorts::tPFI_Filter_Register_Port1Hi& tPfiPorts::tPFI_Filter_Register_Port1Hi::setPFI_Filter_Select_Port1_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0x8fff) | ((u16(fieldValue) << 0xc) & ~0x8fff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::getPFI_Filter_Select_Port1_Line7(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_Filter_Select_t((_softCopy & ~0x8fff) >> 0xc);
}

inline void tPfiPorts::tPFI_Filter_Register_Port1Hi::writePFI_Filter_Select_Port1_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_Filter_Select_Port1_Line7(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_Filter_Select_t tPfiPorts::tPFI_Filter_Register_Port1Hi::readPFI_Filter_Select_Port1_Line7(nMDBG::tStatus2* s)
{
   return getPFI_Filter_Select_Port1_Line7(s);
}

inline tPfiPorts::tPFI_WDT_SafeStateRegister::tPFI_WDT_SafeStateRegister()
{
   _softCopy = u16(0x0);
}

inline tPfiPorts::tPFI_WDT_SafeStateRegister::tRegisterMap* tPfiPorts::tPFI_WDT_SafeStateRegister::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_WDT_SafeStateRegister::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_WDT_SafeStateRegister::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_WDT_SafeStateRegister::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_WDT_SafeStateRegister::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_WDT_SafeStateRegister& tPfiPorts::tPFI_WDT_SafeStateRegister::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tPfiPorts::tPFI_WDT_SafeStateRegister::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_WDT_SafeStateRegister::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_WDT_SafeStateRegister::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tPfiPorts::tPFI_WDT_SafeStateRegister::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_WDT_SafeStateRegister& tPfiPorts::tPFI_WDT_SafeStateRegister::setPFI_WDT_SafeStateValue_Port0(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff00) | ((u16(fieldValue) << 0x0) & ~0xff00);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tPFI_WDT_SafeStateRegister::getPFI_WDT_SafeStateValue_Port0(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff00) >> 0x0);
}

inline tPfiPorts::tPFI_WDT_SafeStateRegister& tPfiPorts::tPFI_WDT_SafeStateRegister::setPFI_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & ~(u16(0x1) << (0x0 + position))) | (u16(bitValue) << (0x0 + position));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tPfiPorts::tPFI_WDT_SafeStateRegister::getPFI_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2*) const
{
   return (_softCopy >> (0x0 + position)) & 0x1;
}

inline void tPfiPorts::tPFI_WDT_SafeStateRegister::writePFI_WDT_SafeStateValue_Port0(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_SafeStateValue_Port0(fieldValue, s);
   flush(s, force);
}
inline void tPfiPorts::tPFI_WDT_SafeStateRegister::writePFI_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_SafeStateValue_Port0(position, bitValue, s);
   flush(s, force);
}
inline u16 tPfiPorts::tPFI_WDT_SafeStateRegister::readPFI_WDT_SafeStateValue_Port0(nMDBG::tStatus2* s)
{
   return getPFI_WDT_SafeStateValue_Port0(s);
}

inline tBoolean tPfiPorts::tPFI_WDT_SafeStateRegister::readPFI_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2* s)
{
   return getPFI_WDT_SafeStateValue_Port0(position, s);
}

inline tPfiPorts::tPFI_WDT_SafeStateRegister& tPfiPorts::tPFI_WDT_SafeStateRegister::setPFI_WDT_SafeStateValue_Port1(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff) | ((u16(fieldValue) << 0x8) & ~0xff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tPfiPorts::tPFI_WDT_SafeStateRegister::getPFI_WDT_SafeStateValue_Port1(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff) >> 0x8);
}

inline tPfiPorts::tPFI_WDT_SafeStateRegister& tPfiPorts::tPFI_WDT_SafeStateRegister::setPFI_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & ~(u16(0x1) << (0x8 + position))) | (u16(bitValue) << (0x8 + position));
   setRegister(newValue, s);
   return *this;
}

inline tBoolean tPfiPorts::tPFI_WDT_SafeStateRegister::getPFI_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2*) const
{
   return (_softCopy >> (0x8 + position)) & 0x1;
}

inline void tPfiPorts::tPFI_WDT_SafeStateRegister::writePFI_WDT_SafeStateValue_Port1(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_SafeStateValue_Port1(fieldValue, s);
   flush(s, force);
}
inline void tPfiPorts::tPFI_WDT_SafeStateRegister::writePFI_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_SafeStateValue_Port1(position, bitValue, s);
   flush(s, force);
}
inline u16 tPfiPorts::tPFI_WDT_SafeStateRegister::readPFI_WDT_SafeStateValue_Port1(nMDBG::tStatus2* s)
{
   return getPFI_WDT_SafeStateValue_Port1(s);
}

inline tBoolean tPfiPorts::tPFI_WDT_SafeStateRegister::readPFI_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2* s)
{
   return getPFI_WDT_SafeStateValue_Port1(position, s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register::tPFI_WDT_ModeSelect_Register()
{
   _softCopy = u32(0x0);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register::tRegisterMap* tPfiPorts::tPFI_WDT_ModeSelect_Register::registerMap(void)
{
   return _regMap;
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tPfiPorts::tPFI_WDT_ModeSelect_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tPfiPorts::tId)kId, s);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tPfiPorts::tId)kId, s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tPfiPorts::tPFI_WDT_ModeSelect_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tPfiPorts::tPFI_WDT_ModeSelect_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffc) | ((u32(fieldValue) << 0x0) & ~0xfffffffc);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line0(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xfffffffc) >> 0x0);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line0(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line0(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line0(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffff3) | ((u32(fieldValue) << 0x2) & ~0xfffffff3);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line1(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xfffffff3) >> 0x2);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line1(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line1(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line1(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffffcf) | ((u32(fieldValue) << 0x4) & ~0xffffffcf);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line2(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xffffffcf) >> 0x4);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line2(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line2(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line2(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff3f) | ((u32(fieldValue) << 0x6) & ~0xffffff3f);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line3(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xffffff3f) >> 0x6);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line3(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line3(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line3(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffcff) | ((u32(fieldValue) << 0x8) & ~0xfffffcff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line4(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xfffffcff) >> 0x8);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line4(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line4(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line4(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffff3ff) | ((u32(fieldValue) << 0xa) & ~0xfffff3ff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line5(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xfffff3ff) >> 0xa);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line5(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line5(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line5(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffcfff) | ((u32(fieldValue) << 0xc) & ~0xffffcfff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line6(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xffffcfff) >> 0xc);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line6(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line6(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line6(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort0_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff3fff) | ((u32(fieldValue) << 0xe) & ~0xffff3fff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort0_Line7(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xffff3fff) >> 0xe);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort0_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort0_Line7(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort0_Line7(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort0_Line7(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffcffff) | ((u32(fieldValue) << 0x10) & ~0xfffcffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line0(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xfffcffff) >> 0x10);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line0(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line0(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line0(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfff3ffff) | ((u32(fieldValue) << 0x12) & ~0xfff3ffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line1(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xfff3ffff) >> 0x12);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line1(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line1(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line1(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffcfffff) | ((u32(fieldValue) << 0x14) & ~0xffcfffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line2(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xffcfffff) >> 0x14);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line2(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line2(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line2(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xff3fffff) | ((u32(fieldValue) << 0x16) & ~0xff3fffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line3(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xff3fffff) >> 0x16);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line3(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line3(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line3(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfcffffff) | ((u32(fieldValue) << 0x18) & ~0xfcffffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line4(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xfcffffff) >> 0x18);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line4(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line4(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line4(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xf3ffffff) | ((u32(fieldValue) << 0x1a) & ~0xf3ffffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line5(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xf3ffffff) >> 0x1a);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line5(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line5(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line5(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xcfffffff) | ((u32(fieldValue) << 0x1c) & ~0xcfffffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line6(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0xcfffffff) >> 0x1c);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line6(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line6(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line6(s);
}

inline tPfiPorts::tPFI_WDT_ModeSelect_Register& tPfiPorts::tPFI_WDT_ModeSelect_Register::setPFI_WDT_ModePort1_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x3fffffff) | ((u32(fieldValue) << 0x1e) & ~0x3fffffff);
   setRegister(newValue, s);
   return *this;
}

inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::getPFI_WDT_ModePort1_Line7(nMDBG::tStatus2*) const
{
   return nPfiPorts::tPFI_WDT_Mode_t((_softCopy & ~0x3fffffff) >> 0x1e);
}

inline void tPfiPorts::tPFI_WDT_ModeSelect_Register::writePFI_WDT_ModePort1_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setPFI_WDT_ModePort1_Line7(fieldValue, s);
   flush(s, force);
}
inline nPfiPorts::tPFI_WDT_Mode_t tPfiPorts::tPFI_WDT_ModeSelect_Register::readPFI_WDT_ModePort1_Line7(nMDBG::tStatus2* s)
{
   return getPFI_WDT_ModePort1_Line7(s);
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

