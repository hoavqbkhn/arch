// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tPfiPorts_h___
#define ___tPfiPorts_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"
#include "tPfiPortsValues.h"


#ifndef ___tPfiPortsValues_h___
#include "tPfiPortsValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tPfiPorts
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg8IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u8 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u8 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg16IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u16 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // PFI_ChangeDetectLatched_Register
   //---------------------------------------------------------------------------
   class tPFI_ChangeDetectLatched_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0x548,
         kId     = 0
      };
      tPFI_ChangeDetectLatched_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_ChangeDetectLatched_Port0Id  = 1,
         kPFI_ChangeDetectLatched_Port1Id  = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tPFI_ChangeDetectLatched_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_ChangeDetectLatched_Register& setPFI_ChangeDetectLatched_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_ChangeDetectLatched_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_ChangeDetectLatched_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_ChangeDetectLatched_Register& setPFI_ChangeDetectLatched_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_ChangeDetectLatched_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_ChangeDetectLatched_Port1(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_ChangeDetectLatched_Register(const tPFI_ChangeDetectLatched_Register&);
      tPFI_ChangeDetectLatched_Register& operator=(const tPFI_ChangeDetectLatched_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_ChangeIrq_Register
   //---------------------------------------------------------------------------
   class tPFI_ChangeIrq_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0x548,
         kId     = 1
      };
      tPFI_ChangeIrq_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_ChangeIrqRE_Port0Id          = 1,
         kPFI_ChangeIrqRE_Port1Id          = 2,
         kPFI_ChangeIrqFE_Port0Id          = 3,
         kPFI_ChangeIrqFE_Port1Id          = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_ChangeIrq_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_ChangeIrq_Register& setPFI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPFI_ChangeIrqRE_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_ChangeIrqRE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPFI_ChangeIrqRE_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_ChangeIrq_Register& setPFI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPFI_ChangeIrqRE_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_ChangeIrqRE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPFI_ChangeIrqRE_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_ChangeIrq_Register& setPFI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPFI_ChangeIrqFE_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_ChangeIrqFE_Port0(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPFI_ChangeIrqFE_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_ChangeIrq_Register& setPFI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getPFI_ChangeIrqFE_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_ChangeIrqFE_Port1(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readPFI_ChangeIrqFE_Port1(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_ChangeIrq_Register(const tPFI_ChangeIrq_Register&);
      tPFI_ChangeIrq_Register& operator=(const tPFI_ChangeIrq_Register&);

   };

   //---------------------------------------------------------------------------
   // Static_Digital_Input_Register
   //---------------------------------------------------------------------------
   class tStatic_Digital_Input_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xe0,
         kId     = 2
      };
      tStatic_Digital_Input_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_StaticInputValue_Port0Id     = 1,
         kPFI_StaticInputValue_Port1Id     = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tStatic_Digital_Input_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tStatic_Digital_Input_Register& setPFI_StaticInputValue_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_StaticInputValue_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_StaticInputValue_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Input_Register& setPFI_StaticInputValue_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_StaticInputValue_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readPFI_StaticInputValue_Port1(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tStatic_Digital_Input_Register(const tStatic_Digital_Input_Register&);
      tStatic_Digital_Input_Register& operator=(const tStatic_Digital_Input_Register&);

   };

   //---------------------------------------------------------------------------
   // Static_Digital_Output_Register
   //---------------------------------------------------------------------------
   class tStatic_Digital_Output_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xe0,
         kId     = 3
      };
      tStatic_Digital_Output_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_StaticOutputValue_Port0Id    = 1,
         kPFI_StaticOutputValue_Port1Id    = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tStatic_Digital_Output_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tStatic_Digital_Output_Register& setPFI_StaticOutputValue_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_StaticOutputValue_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_StaticOutputValue_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFI_StaticOutputValue_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tStatic_Digital_Output_Register& setPFI_StaticOutputValue_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_StaticOutputValue_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_StaticOutputValue_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFI_StaticOutputValue_Port1(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tStatic_Digital_Output_Register(const tStatic_Digital_Output_Register&);
      tStatic_Digital_Output_Register& operator=(const tStatic_Digital_Output_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_Direction_Register
   //---------------------------------------------------------------------------
   class tPFI_Direction_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xa4,
         kId     = 4
      };
      tPFI_Direction_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFIDirection_Port0Id             = 1,
         kPFIDirection_Port1Id             = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Direction_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Direction_Register& setPFIDirection_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFIDirection_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFIDirection_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFIDirection_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Direction_Register& setPFIDirection_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFIDirection_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFIDirection_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFIDirection_Port1(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Direction_Register(const tPFI_Direction_Register&);
      tPFI_Direction_Register& operator=(const tPFI_Direction_Register&);

   };

   //---------------------------------------------------------------------------
   // PFI_OutputSelectRegister_t
   //---------------------------------------------------------------------------
   class tPFI_OutputSelectRegister_t : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tPFI_OutputSelectRegister_t(u32 offset, u32 id);
      tPFI_OutputSelectRegister_t();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kPFI_i_Output_SelectId            = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_OutputSelectRegister_t& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_OutputSelectRegister_t& setPFI_i_Output_Select(nPfiPorts::tPFI_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Output_Select_t getPFI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_i_Output_Select(nPfiPorts::tPFI_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Output_Select_t readPFI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_OutputSelectRegister_t(const tPFI_OutputSelectRegister_t&);
      tPFI_OutputSelectRegister_t& operator=(const tPFI_OutputSelectRegister_t&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port0Lo
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_Port0Lo : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xb0,
         kId     = 21
      };
      tPFI_Filter_Register_Port0Lo();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_Filter_Select_Port0_Line0Id  = 1,
         kPFI_Filter_Select_Port0_Line1Id  = 3,
         kPFI_Filter_Select_Port0_Line2Id  = 5,
         kPFI_Filter_Select_Port0_Line3Id  = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port0Lo& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port0Lo& setPFI_Filter_Select_Port0_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port0Lo& setPFI_Filter_Select_Port0_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port0Lo& setPFI_Filter_Select_Port0_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port0Lo& setPFI_Filter_Select_Port0_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_Port0Lo(const tPFI_Filter_Register_Port0Lo&);
      tPFI_Filter_Register_Port0Lo& operator=(const tPFI_Filter_Register_Port0Lo&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port0Hi
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_Port0Hi : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xb2,
         kId     = 22
      };
      tPFI_Filter_Register_Port0Hi();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_Filter_Select_Port0_Line4Id  = 1,
         kPFI_Filter_Select_Port0_Line5Id  = 3,
         kPFI_Filter_Select_Port0_Line6Id  = 5,
         kPFI_Filter_Select_Port0_Line7Id  = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port0Hi& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port0Hi& setPFI_Filter_Select_Port0_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port0Hi& setPFI_Filter_Select_Port0_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port0Hi& setPFI_Filter_Select_Port0_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port0Hi& setPFI_Filter_Select_Port0_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port0_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port0_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port0_Line7(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_Port0Hi(const tPFI_Filter_Register_Port0Hi&);
      tPFI_Filter_Register_Port0Hi& operator=(const tPFI_Filter_Register_Port0Hi&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port1Lo
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_Port1Lo : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xb4,
         kId     = 23
      };
      tPFI_Filter_Register_Port1Lo();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_Filter_Select_Port1_Line0Id  = 1,
         kPFI_Filter_Select_Port1_Line1Id  = 3,
         kPFI_Filter_Select_Port1_Line2Id  = 5,
         kPFI_Filter_Select_Port1_Line3Id  = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port1Lo& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port1Lo& setPFI_Filter_Select_Port1_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line0(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port1Lo& setPFI_Filter_Select_Port1_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line1(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port1Lo& setPFI_Filter_Select_Port1_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line2(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port1Lo& setPFI_Filter_Select_Port1_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line3(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line3(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_Port1Lo(const tPFI_Filter_Register_Port1Lo&);
      tPFI_Filter_Register_Port1Lo& operator=(const tPFI_Filter_Register_Port1Lo&);

   };

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port1Hi
   //---------------------------------------------------------------------------
   class tPFI_Filter_Register_Port1Hi : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xb6,
         kId     = 24
      };
      tPFI_Filter_Register_Port1Hi();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_Filter_Select_Port1_Line4Id  = 1,
         kPFI_Filter_Select_Port1_Line5Id  = 3,
         kPFI_Filter_Select_Port1_Line6Id  = 5,
         kPFI_Filter_Select_Port1_Line7Id  = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port1Hi& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_Filter_Register_Port1Hi& setPFI_Filter_Select_Port1_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line4(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port1Hi& setPFI_Filter_Select_Port1_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line5(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port1Hi& setPFI_Filter_Select_Port1_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line6(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_Filter_Register_Port1Hi& setPFI_Filter_Select_Port1_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_Filter_Select_t getPFI_Filter_Select_Port1_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_Filter_Select_Port1_Line7(nPfiPorts::tPFI_Filter_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_Filter_Select_t readPFI_Filter_Select_Port1_Line7(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_Filter_Register_Port1Hi(const tPFI_Filter_Register_Port1Hi&);
      tPFI_Filter_Register_Port1Hi& operator=(const tPFI_Filter_Register_Port1Hi&);

   };

   //---------------------------------------------------------------------------
   // PFI_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   class tPFI_WDT_SafeStateRegister : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xe2,
         kId     = 25
      };
      tPFI_WDT_SafeStateRegister();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_WDT_SafeStateValue_Port0Id   = 1,
         kPFI_WDT_SafeStateValue_Port1Id   = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_WDT_SafeStateRegister& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_WDT_SafeStateRegister& setPFI_WDT_SafeStateValue_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_WDT_SafeStateValue_Port0(nMDBG::tStatus2* statusChain = NULL) const;

      inline tPFI_WDT_SafeStateRegister& setPFI_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getPFI_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_SafeStateValue_Port0(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writePFI_WDT_SafeStateValue_Port0(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFI_WDT_SafeStateValue_Port0(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readPFI_WDT_SafeStateValue_Port0(u32 position, nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_SafeStateRegister& setPFI_WDT_SafeStateValue_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getPFI_WDT_SafeStateValue_Port1(nMDBG::tStatus2* statusChain = NULL) const;

      inline tPFI_WDT_SafeStateRegister& setPFI_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL);
      inline tBoolean getPFI_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_SafeStateValue_Port1(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writePFI_WDT_SafeStateValue_Port1(u32 position, tBoolean bitValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readPFI_WDT_SafeStateValue_Port1(nMDBG::tStatus2* statusChain = NULL);

      inline tBoolean readPFI_WDT_SafeStateValue_Port1(u32 position, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_WDT_SafeStateRegister(const tPFI_WDT_SafeStateRegister&);
      tPFI_WDT_SafeStateRegister& operator=(const tPFI_WDT_SafeStateRegister&);

   };

   //---------------------------------------------------------------------------
   // PFI_WDT_ModeSelect_Register
   //---------------------------------------------------------------------------
   class tPFI_WDT_ModeSelect_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tPfiPorts tRegisterMap;

      enum {
         kOffset = 0xe4,
         kId     = 26
      };
      tPFI_WDT_ModeSelect_Register();


      typedef enum {
         kRegisterId                          = 0,
         kPFI_WDT_ModePort0_Line0Id        = 1,
         kPFI_WDT_ModePort0_Line1Id        = 2,
         kPFI_WDT_ModePort0_Line2Id        = 3,
         kPFI_WDT_ModePort0_Line3Id        = 4,
         kPFI_WDT_ModePort0_Line4Id        = 5,
         kPFI_WDT_ModePort0_Line5Id        = 6,
         kPFI_WDT_ModePort0_Line6Id        = 7,
         kPFI_WDT_ModePort0_Line7Id        = 8,
         kPFI_WDT_ModePort1_Line0Id        = 9,
         kPFI_WDT_ModePort1_Line1Id        = 10,
         kPFI_WDT_ModePort1_Line2Id        = 11,
         kPFI_WDT_ModePort1_Line3Id        = 12,
         kPFI_WDT_ModePort1_Line4Id        = 13,
         kPFI_WDT_ModePort1_Line5Id        = 14,
         kPFI_WDT_ModePort1_Line6Id        = 15,
         kPFI_WDT_ModePort1_Line7Id        = 16,
         kMaxFieldId                          = 16
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tPFI_WDT_ModeSelect_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort0_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort0_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort0_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort0_Line7(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line0(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line0(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line0(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line1(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line1(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line1(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line2(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line2(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line2(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line3(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line3(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line3(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line4(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line4(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line4(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line5(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line5(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line5(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line6(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line6(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line6(nMDBG::tStatus2* statusChain = NULL);

      inline tPFI_WDT_ModeSelect_Register& setPFI_WDT_ModePort1_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nPfiPorts::tPFI_WDT_Mode_t getPFI_WDT_ModePort1_Line7(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writePFI_WDT_ModePort1_Line7(nPfiPorts::tPFI_WDT_Mode_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nPfiPorts::tPFI_WDT_Mode_t readPFI_WDT_ModePort1_Line7(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tPFI_WDT_ModeSelect_Register(const tPFI_WDT_ModeSelect_Register&);
      tPFI_WDT_ModeSelect_Register& operator=(const tPFI_WDT_ModeSelect_Register&);

   };

   //----------------------------------------
   // Register Array Sizes
   //----------------------------------------
   enum {
      kPFI_OutputSelectRegister_iArraySize = 16
   };

   //---------------------------------------------------------------------------
   // PFI_ChangeDetectLatched_Register
   //---------------------------------------------------------------------------
   tPFI_ChangeDetectLatched_Register PFI_ChangeDetectLatched_Register;

   //---------------------------------------------------------------------------
   // PFI_ChangeIrq_Register
   //---------------------------------------------------------------------------
   tPFI_ChangeIrq_Register PFI_ChangeIrq_Register;

   //---------------------------------------------------------------------------
   // Static_Digital_Input_Register
   //---------------------------------------------------------------------------
   tStatic_Digital_Input_Register Static_Digital_Input_Register;

   //---------------------------------------------------------------------------
   // Static_Digital_Output_Register
   //---------------------------------------------------------------------------
   tStatic_Digital_Output_Register Static_Digital_Output_Register;

   //---------------------------------------------------------------------------
   // PFI_Direction_Register
   //---------------------------------------------------------------------------
   tPFI_Direction_Register PFI_Direction_Register;

   //---------------------------------------------------------------------------
   // PFI_OutputSelectRegister_i
   //---------------------------------------------------------------------------
   tPFI_OutputSelectRegister_t PFI_OutputSelectRegister_i[kPFI_OutputSelectRegister_iArraySize];

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port0Lo
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_Port0Lo PFI_Filter_Register_Port0Lo;

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port0Hi
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_Port0Hi PFI_Filter_Register_Port0Hi;

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port1Lo
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_Port1Lo PFI_Filter_Register_Port1Lo;

   //---------------------------------------------------------------------------
   // PFI_Filter_Register_Port1Hi
   //---------------------------------------------------------------------------
   tPFI_Filter_Register_Port1Hi PFI_Filter_Register_Port1Hi;

   //---------------------------------------------------------------------------
   // PFI_WDT_SafeStateRegister
   //---------------------------------------------------------------------------
   tPFI_WDT_SafeStateRegister PFI_WDT_SafeStateRegister;

   //---------------------------------------------------------------------------
   // PFI_WDT_ModeSelect_Register
   //---------------------------------------------------------------------------
   tPFI_WDT_ModeSelect_Register PFI_WDT_ModeSelect_Register;

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kPFI_ChangeDetectLatched_RegisterId     = 0,
      kPFI_ChangeDetectLatched_Port0Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeDetectLatched_Register::kPFI_ChangeDetectLatched_Port0Id, kPFI_ChangeDetectLatched_RegisterId),
      kPFI_ChangeDetectLatched_Port1Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeDetectLatched_Register::kPFI_ChangeDetectLatched_Port1Id, kPFI_ChangeDetectLatched_RegisterId),

      kPFI_ChangeIrq_RegisterId         = 1,
      kPFI_ChangeIrqRE_Port0Id          = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeIrq_Register::kPFI_ChangeIrqRE_Port0Id, kPFI_ChangeIrq_RegisterId),
      kPFI_ChangeIrqRE_Port1Id          = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeIrq_Register::kPFI_ChangeIrqRE_Port1Id, kPFI_ChangeIrq_RegisterId),
      kPFI_ChangeIrqFE_Port0Id          = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeIrq_Register::kPFI_ChangeIrqFE_Port0Id, kPFI_ChangeIrq_RegisterId),
      kPFI_ChangeIrqFE_Port1Id          = nNIMXRegisterMap120_mBuildFieldId(tPFI_ChangeIrq_Register::kPFI_ChangeIrqFE_Port1Id, kPFI_ChangeIrq_RegisterId),

      kStatic_Digital_Input_RegisterId  = 2,
      kPFI_StaticInputValue_Port0Id     = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Input_Register::kPFI_StaticInputValue_Port0Id, kStatic_Digital_Input_RegisterId),
      kPFI_StaticInputValue_Port1Id     = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Input_Register::kPFI_StaticInputValue_Port1Id, kStatic_Digital_Input_RegisterId),

      kStatic_Digital_Output_RegisterId   = 3,
      kPFI_StaticOutputValue_Port0Id    = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Output_Register::kPFI_StaticOutputValue_Port0Id, kStatic_Digital_Output_RegisterId),
      kPFI_StaticOutputValue_Port1Id    = nNIMXRegisterMap120_mBuildFieldId(tStatic_Digital_Output_Register::kPFI_StaticOutputValue_Port1Id, kStatic_Digital_Output_RegisterId),

      kPFI_Direction_RegisterId         = 4,
      kPFIDirection_Port0Id             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFIDirection_Port0Id, kPFI_Direction_RegisterId),
      kPFIDirection_Port1Id             = nNIMXRegisterMap120_mBuildFieldId(tPFI_Direction_Register::kPFIDirection_Port1Id, kPFI_Direction_RegisterId),

      kPFI_OutputSelectRegister_i0Id    = 5,
      kPFI_OutSel0PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i0Id),

      kPFI_OutputSelectRegister_i1Id    = 6,
      kPFI_OutSel1PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i1Id),

      kPFI_OutputSelectRegister_i2Id    = 7,
      kPFI_OutSel2PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i2Id),

      kPFI_OutputSelectRegister_i3Id    = 8,
      kPFI_OutSel3PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i3Id),

      kPFI_OutputSelectRegister_i4Id    = 9,
      kPFI_OutSel4PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i4Id),

      kPFI_OutputSelectRegister_i5Id    = 10,
      kPFI_OutSel5PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i5Id),

      kPFI_OutputSelectRegister_i6Id    = 11,
      kPFI_OutSel6PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i6Id),

      kPFI_OutputSelectRegister_i7Id    = 12,
      kPFI_OutSel7PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i7Id),

      kPFI_OutputSelectRegister_i8Id    = 13,
      kPFI_OutSel8PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i8Id),

      kPFI_OutputSelectRegister_i9Id    = 14,
      kPFI_OutSel9PFI_i_Output_SelectId   = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i9Id),

      kPFI_OutputSelectRegister_i10Id   = 15,
      kPFI_OutSel10PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i10Id),

      kPFI_OutputSelectRegister_i11Id   = 16,
      kPFI_OutSel11PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i11Id),

      kPFI_OutputSelectRegister_i12Id   = 17,
      kPFI_OutSel12PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i12Id),

      kPFI_OutputSelectRegister_i13Id   = 18,
      kPFI_OutSel13PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i13Id),

      kPFI_OutputSelectRegister_i14Id   = 19,
      kPFI_OutSel14PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i14Id),

      kPFI_OutputSelectRegister_i15Id   = 20,
      kPFI_OutSel15PFI_i_Output_SelectId    = nNIMXRegisterMap120_mBuildFieldId(tPFI_OutputSelectRegister_t::kPFI_i_Output_SelectId, kPFI_OutputSelectRegister_i15Id),

      kPFI_Filter_Register_Port0LoId    = 21,
      kPFI_Filter_Select_Port0_Line0Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Lo::kPFI_Filter_Select_Port0_Line0Id, kPFI_Filter_Register_Port0LoId),
      kPFI_Filter_Select_Port0_Line1Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Lo::kPFI_Filter_Select_Port0_Line1Id, kPFI_Filter_Register_Port0LoId),
      kPFI_Filter_Select_Port0_Line2Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Lo::kPFI_Filter_Select_Port0_Line2Id, kPFI_Filter_Register_Port0LoId),
      kPFI_Filter_Select_Port0_Line3Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Lo::kPFI_Filter_Select_Port0_Line3Id, kPFI_Filter_Register_Port0LoId),

      kPFI_Filter_Register_Port0HiId    = 22,
      kPFI_Filter_Select_Port0_Line4Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Hi::kPFI_Filter_Select_Port0_Line4Id, kPFI_Filter_Register_Port0HiId),
      kPFI_Filter_Select_Port0_Line5Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Hi::kPFI_Filter_Select_Port0_Line5Id, kPFI_Filter_Register_Port0HiId),
      kPFI_Filter_Select_Port0_Line6Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Hi::kPFI_Filter_Select_Port0_Line6Id, kPFI_Filter_Register_Port0HiId),
      kPFI_Filter_Select_Port0_Line7Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port0Hi::kPFI_Filter_Select_Port0_Line7Id, kPFI_Filter_Register_Port0HiId),

      kPFI_Filter_Register_Port1LoId    = 23,
      kPFI_Filter_Select_Port1_Line0Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Lo::kPFI_Filter_Select_Port1_Line0Id, kPFI_Filter_Register_Port1LoId),
      kPFI_Filter_Select_Port1_Line1Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Lo::kPFI_Filter_Select_Port1_Line1Id, kPFI_Filter_Register_Port1LoId),
      kPFI_Filter_Select_Port1_Line2Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Lo::kPFI_Filter_Select_Port1_Line2Id, kPFI_Filter_Register_Port1LoId),
      kPFI_Filter_Select_Port1_Line3Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Lo::kPFI_Filter_Select_Port1_Line3Id, kPFI_Filter_Register_Port1LoId),

      kPFI_Filter_Register_Port1HiId    = 24,
      kPFI_Filter_Select_Port1_Line4Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Hi::kPFI_Filter_Select_Port1_Line4Id, kPFI_Filter_Register_Port1HiId),
      kPFI_Filter_Select_Port1_Line5Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Hi::kPFI_Filter_Select_Port1_Line5Id, kPFI_Filter_Register_Port1HiId),
      kPFI_Filter_Select_Port1_Line6Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Hi::kPFI_Filter_Select_Port1_Line6Id, kPFI_Filter_Register_Port1HiId),
      kPFI_Filter_Select_Port1_Line7Id  = nNIMXRegisterMap120_mBuildFieldId(tPFI_Filter_Register_Port1Hi::kPFI_Filter_Select_Port1_Line7Id, kPFI_Filter_Register_Port1HiId),

      kPFI_WDT_SafeStateRegisterId      = 25,
      kPFI_WDT_SafeStateValue_Port0Id   = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_SafeStateRegister::kPFI_WDT_SafeStateValue_Port0Id, kPFI_WDT_SafeStateRegisterId),
      kPFI_WDT_SafeStateValue_Port1Id   = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_SafeStateRegister::kPFI_WDT_SafeStateValue_Port1Id, kPFI_WDT_SafeStateRegisterId),

      kPFI_WDT_ModeSelect_RegisterId    = 26,
      kPFI_WDT_ModePort0_Line0Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line0Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort0_Line1Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line1Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort0_Line2Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line2Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort0_Line3Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line3Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort0_Line4Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line4Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort0_Line5Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line5Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort0_Line6Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line6Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort0_Line7Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort0_Line7Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line0Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line0Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line1Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line1Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line2Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line2Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line3Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line3Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line4Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line4Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line5Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line5Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line6Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line6Id, kPFI_WDT_ModeSelect_RegisterId),
      kPFI_WDT_ModePort1_Line7Id        = nNIMXRegisterMap120_mBuildFieldId(tPFI_WDT_ModeSelect_Register::kPFI_WDT_ModePort1_Line7Id, kPFI_WDT_ModeSelect_RegisterId),


      kMaxRegisterId = 26

   } tId;

   tPfiPorts(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tPfiPorts();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tPfiPorts();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[27];

};

#ifndef ___tPfiPorts_ipp___
#ifndef ___tPfiPorts_h_no_inline___
#include "tPfiPorts.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

