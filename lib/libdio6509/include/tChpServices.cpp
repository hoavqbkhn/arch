// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tChpServices_h___
#include "tChpServices.h"
#endif

tChpServices::tChpServices(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

tChpServices::tChpServices()

{
   _addressOffset = 0;

}

void tChpServices::initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* s)
{

   _addrSpace = addrSpace;
   _addressOffset = addressOffset;

   _initialize(s);
}

void tChpServices::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   GlobalInterruptStatus_Register.setRegister(u16(0x0), s);
   DI_Interrupt_Status_Register.setRegister(u16(0x0), s);
   WatchdogTimer_Interrupt_Status_Register.setRegister(u16(0x0), s);
   ChangeDetectStatusRegister.setRegister(u32(0x0), s);
   IntForwarding_ControlStatus.setRegister(u32(0x0), s);
   IntForwarding_ControlStatus.markDirty(s);
   IntForwarding_DestinationReg.setRegister(u32(0x0), s);
   IntForwarding_DestinationReg.markDirty(s);
   ScratchPadRegister.setRegister(u32(0x0), s);
   ScratchPadRegister.markDirty(s);
   Signature_Register.setRegister(u32(0x0), s);
   TimeSincePowerUpRegister.setRegister(u32(0x0), s);
   WatchdogStatusRegister.setRegister(u32(0x0), s);
   WatchdogTimeoutRegister.setRegister(u32(0x0), s);
   WatchdogTimeoutRegister.markDirty(s);
   WatchdogConfiguration.setRegister(u16(0x0), s);
   WatchdogConfiguration.markDirty(s);
   RTSI_Trig_Direction_Register.setRegister(u16(0x0), s);
   RTSI_Trig_Direction_Register.markDirty(s);
   unsigned int i;
   for(i = 0; i < 8; ++i) {
      RTSI_OutputSelectRegister_i[i].setRegister(u8(0x0), s);
      RTSI_OutputSelectRegister_i[i].markDirty(s);
   }
}

void tChpServices::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   {
      unsigned int i;
      for (i=0; i<8; ++i) {
         RTSI_OutputSelectRegister_i[i].initialize(0xa8 + (0x1 * i), 0x13 + i);
      }
   }


   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   GlobalInterruptStatus_Register.setRegisterMap(this);
   GlobalInterruptEnable_Register.setRegisterMap(this);
   DI_Interrupt_Status_Register.setRegisterMap(this);
   WatchdogTimer_Interrupt_Status_Register.setRegisterMap(this);
   WatchdogTimer_Interrupt1_Register.setRegisterMap(this);
   WatchdogTimer_Interrupt2_Register.setRegisterMap(this);
   ChangeDetectStatusRegister.setRegisterMap(this);
   ChangeDetectIRQ_Register.setRegisterMap(this);
   IntForwarding_ControlStatus.setRegisterMap(this);
   IntForwarding_DestinationReg.setRegisterMap(this);
   ScratchPadRegister.setRegisterMap(this);
   Signature_Register.setRegisterMap(this);
   Joint_Reset_Register.setRegisterMap(this);
   TimeSincePowerUpRegister.setRegisterMap(this);
   WatchdogStatusRegister.setRegisterMap(this);
   WatchdogTimeoutRegister.setRegisterMap(this);
   WatchdogConfiguration.setRegisterMap(this);
   WatchdogControl.setRegisterMap(this);
   RTSI_Trig_Direction_Register.setRegisterMap(this);
   {
      unsigned int i;
      for(i = 0; i < 8; ++i) {
         RTSI_OutputSelectRegister_i[i].setRegisterMap(this);
      }
   }

   //----------------------------------------
   // initialize dirty flags
   //----------------------------------------
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tChpServices::~tChpServices()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

