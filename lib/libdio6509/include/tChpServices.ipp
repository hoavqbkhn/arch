// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tChpServices_ipp___
#define ___tChpServices_ipp___

#ifndef ___tChpServices_h___
#include "tChpServices.h"
#endif

#ifndef ___nNIMXRegistermap_tStatus2Ptr_ipp___
#define ___nNIMXRegistermap_tStatus2Ptr_ipp___

typedef nMDBG::tStatus2 nNIMXRegisterMap120_tStatus2;


namespace nNIMXRegisterMap120 {
namespace {

typedef nNIMXRegisterMap120_tStatus2 tStatus2;

inline void setStatus(tStatus2* s, tStatus newStatus)
{
   if (s) s->setCode(newStatus);
}

inline tStatus* toPALStatusPtr(tStatus2* s)
{
   return s ? s->operator tStatus*() : ((tStatus*)NULL);
}

inline tBoolean statusIsFatal(tStatus2* s)
{
   return s && s->isFatal();
}

} // unnamed namespace
} // namespace nNIMXRegisterMap120

#endif // ___nNIMXRegistermap_tStatus2Ptr_ipp___


inline void tChpServices::tReg8IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u8 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write8(offset, value);
}
inline u8 tChpServices::tReg8IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u8 value = (u8)~0;
   if (s && s->isFatal()) return value;
   value = (u8)addrSpace.read8(offset);
   return value;
}

inline void tChpServices::tReg16IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u16 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write16(offset, value);
}

inline u16 tChpServices::tReg16IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u16 value = (u16)~0;
   if (s && s->isFatal()) return value;
   value = (u16)addrSpace.read16(offset);
   return value;
}

inline void tChpServices::tReg32IODirect32::write(
   tBusSpaceReference addrSpace,
   u32 offset,
   u32 value,
   nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   addrSpace.write32(offset, value);
}

inline u32 tChpServices::tReg32IODirect32::read(
   tBusSpaceReference addrSpace,
   u32 offset,
   nMDBG::tStatus2* s)
{
   u32 value = (u32)~0;
   if (s && s->isFatal()) return value;
   value = addrSpace.read32(offset);
   return value;
}

inline tBusSpaceReference tChpServices::getBusSpaceReference(void) const
{
   return _addrSpace;
}

inline void tChpServices::setAddressOffset(u32 value, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   _addressOffset = value;
}
inline u32 tChpServices::getAddressOffset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return 0UL;
   return _addressOffset;
}
inline tBoolean tChpServices::isDirty(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return kFalse;
   u32 regId = id&0x01FFFFFF;
   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return kFalse;
   }

   return _dirtyVector[regId];
}

inline void tChpServices::markDirty(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   u32 regId = id&0x01FFFFFF;

   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return;
   }

   _dirtyVector[regId] = 1;
}

inline void tChpServices::markClean(tId id, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   u32 regId = id&0x01FFFFFF;

   if (regId > kMaxRegisterId) {
      nNIMXRegisterMap120::setStatus(s, kStatusBadSelector);
      return;
   }

   _dirtyVector[regId] = 0;
}

inline void tChpServices::markDirty(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   unsigned int i;
   for (i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 1;
   }
}

inline void tChpServices::markClean(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }
}

inline tChpServices::tGlobalInterruptStatus_Register::tGlobalInterruptStatus_Register()
{
   _softCopy = u16(0x0);
}

inline tChpServices::tGlobalInterruptStatus_Register::tRegisterMap* tChpServices::tGlobalInterruptStatus_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tGlobalInterruptStatus_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tChpServices::tGlobalInterruptStatus_Register& tChpServices::tGlobalInterruptStatus_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tChpServices::tGlobalInterruptStatus_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tGlobalInterruptStatus_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u16 tChpServices::tGlobalInterruptStatus_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tGlobalInterruptStatus_Register& tChpServices::tGlobalInterruptStatus_Register::setDI_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xffbf) | ((u16(fieldValue) << 0x6) & ~0xffbf);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tGlobalInterruptStatus_Register::getDI_Interrupt_Status(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xffbf) >> 0x6);
}

inline u16 tChpServices::tGlobalInterruptStatus_Register::readDI_Interrupt_Status(nMDBG::tStatus2* s)
{
   refresh(s);
   return getDI_Interrupt_Status(s);
}

inline tChpServices::tGlobalInterruptStatus_Register& tChpServices::tGlobalInterruptStatus_Register::setWatchdogTimer_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfbff) | ((u16(fieldValue) << 0xa) & ~0xfbff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tGlobalInterruptStatus_Register::getWatchdogTimer_Interrupt_Status(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xfbff) >> 0xa);
}

inline u16 tChpServices::tGlobalInterruptStatus_Register::readWatchdogTimer_Interrupt_Status(nMDBG::tStatus2* s)
{
   refresh(s);
   return getWatchdogTimer_Interrupt_Status(s);
}

inline tChpServices::tGlobalInterruptEnable_Register::tGlobalInterruptEnable_Register()
{
}

inline tChpServices::tGlobalInterruptEnable_Register::tRegisterMap* tChpServices::tGlobalInterruptEnable_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tGlobalInterruptEnable_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline void tChpServices::tGlobalInterruptEnable_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), fieldValue, s);
}

inline void tChpServices::tGlobalInterruptEnable_Register::writeDI_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x6) & ~0xffffffbf,s);
}
inline void tChpServices::tGlobalInterruptEnable_Register::writeWatchdogTimer_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0xa) & ~0xfffffbff,s);
}
inline void tChpServices::tGlobalInterruptEnable_Register::writeDI_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x16) & ~0xffbfffff,s);
}
inline void tChpServices::tGlobalInterruptEnable_Register::writeWatchdogTimerInterrupt_Disable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x1a) & ~0xfbffffff,s);
}
inline tChpServices::tDI_Interrupt_Status_Register::tDI_Interrupt_Status_Register()
{
   _softCopy = u16(0x0);
}

inline tChpServices::tDI_Interrupt_Status_Register::tRegisterMap* tChpServices::tDI_Interrupt_Status_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tDI_Interrupt_Status_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tChpServices::tDI_Interrupt_Status_Register& tChpServices::tDI_Interrupt_Status_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tChpServices::tDI_Interrupt_Status_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tDI_Interrupt_Status_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u16 tChpServices::tDI_Interrupt_Status_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tDI_Interrupt_Status_Register& tChpServices::tDI_Interrupt_Status_Register::setChangeDetectionIrqSt(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfffe) | ((u16(fieldValue) << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tDI_Interrupt_Status_Register::getChangeDetectionIrqSt(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tChpServices::tDI_Interrupt_Status_Register::readChangeDetectionIrqSt(nMDBG::tStatus2* s)
{
   refresh(s);
   return getChangeDetectionIrqSt(s);
}

inline tChpServices::tDI_Interrupt_Status_Register& tChpServices::tDI_Interrupt_Status_Register::setChangeDetectionErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfffd) | ((u16(fieldValue) << 0x1) & ~0xfffd);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tDI_Interrupt_Status_Register::getChangeDetectionErrorIrqSt(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xfffd) >> 0x1);
}

inline u16 tChpServices::tDI_Interrupt_Status_Register::readChangeDetectionErrorIrqSt(nMDBG::tStatus2* s)
{
   refresh(s);
   return getChangeDetectionErrorIrqSt(s);
}

inline tChpServices::tWatchdogTimer_Interrupt_Status_Register::tWatchdogTimer_Interrupt_Status_Register()
{
   _softCopy = u16(0x0);
}

inline tChpServices::tWatchdogTimer_Interrupt_Status_Register::tRegisterMap* tChpServices::tWatchdogTimer_Interrupt_Status_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tWatchdogTimer_Interrupt_Status_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tChpServices::tWatchdogTimer_Interrupt_Status_Register& tChpServices::tWatchdogTimer_Interrupt_Status_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u16 tChpServices::tWatchdogTimer_Interrupt_Status_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tWatchdogTimer_Interrupt_Status_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u16 tChpServices::tWatchdogTimer_Interrupt_Status_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tWatchdogTimer_Interrupt_Status_Register& tChpServices::tWatchdogTimer_Interrupt_Status_Register::setWatchdogTimerTriggerSt(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfffe) | ((u16(fieldValue) << 0x0) & ~0xfffe);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tWatchdogTimer_Interrupt_Status_Register::getWatchdogTimerTriggerSt(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xfffe) >> 0x0);
}

inline u16 tChpServices::tWatchdogTimer_Interrupt_Status_Register::readWatchdogTimerTriggerSt(nMDBG::tStatus2* s)
{
   refresh(s);
   return getWatchdogTimerTriggerSt(s);
}

inline tChpServices::tWatchdogTimer_Interrupt1_Register::tWatchdogTimer_Interrupt1_Register()
{
}

inline tChpServices::tWatchdogTimer_Interrupt1_Register::tRegisterMap* tChpServices::tWatchdogTimer_Interrupt1_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tWatchdogTimer_Interrupt1_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline void tChpServices::tWatchdogTimer_Interrupt1_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), fieldValue, s);
}

inline void tChpServices::tWatchdogTimer_Interrupt1_Register::writeWDT_TriggerIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x0) & ~0xfffffffe,s);
}
inline void tChpServices::tWatchdogTimer_Interrupt1_Register::writeWDT_TriggerIRQ_Ack(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x10) & ~0xfffeffff,s);
}
inline tChpServices::tWatchdogTimer_Interrupt2_Register::tWatchdogTimer_Interrupt2_Register()
{
}

inline tChpServices::tWatchdogTimer_Interrupt2_Register::tRegisterMap* tChpServices::tWatchdogTimer_Interrupt2_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tWatchdogTimer_Interrupt2_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline void tChpServices::tWatchdogTimer_Interrupt2_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), fieldValue, s);
}

inline void tChpServices::tWatchdogTimer_Interrupt2_Register::writeWDT_TriggerIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x0) & ~0xfffffffe,s);
}
inline void tChpServices::tWatchdogTimer_Interrupt2_Register::writeWDT_TriggerIRQ_Ack2(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x10) & ~0xfffeffff,s);
}
inline tChpServices::tChangeDetectStatusRegister::tChangeDetectStatusRegister()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tChangeDetectStatusRegister::tRegisterMap* tChpServices::tChangeDetectStatusRegister::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tChangeDetectStatusRegister::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tChpServices::tChangeDetectStatusRegister& tChpServices::tChangeDetectStatusRegister::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tChpServices::tChangeDetectStatusRegister::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tChangeDetectStatusRegister::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tChpServices::tChangeDetectStatusRegister::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tChangeDetectStatusRegister& tChpServices::tChangeDetectStatusRegister::setChangeDetectStatus(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffe) | ((u32(fieldValue) << 0x0) & ~0xfffffffe);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tChangeDetectStatusRegister::getChangeDetectStatus(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xfffffffe) >> 0x0);
}

inline u32 tChpServices::tChangeDetectStatusRegister::readChangeDetectStatus(nMDBG::tStatus2* s)
{
   refresh(s);
   return getChangeDetectStatus(s);
}

inline tChpServices::tChangeDetectStatusRegister& tChpServices::tChangeDetectStatusRegister::setChangeDetectError(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffd) | ((u32(fieldValue) << 0x1) & ~0xfffffffd);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tChangeDetectStatusRegister::getChangeDetectError(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xfffffffd) >> 0x1);
}

inline u32 tChpServices::tChangeDetectStatusRegister::readChangeDetectError(nMDBG::tStatus2* s)
{
   refresh(s);
   return getChangeDetectError(s);
}

inline tChpServices::tChangeDetectIRQ_Register::tChangeDetectIRQ_Register()
{
}

inline tChpServices::tChangeDetectIRQ_Register::tRegisterMap* tChpServices::tChangeDetectIRQ_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tChangeDetectIRQ_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline void tChpServices::tChangeDetectIRQ_Register::writeRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), fieldValue, s);
}

inline void tChpServices::tChangeDetectIRQ_Register::writeChangeDetectIRQ_Acknowledge(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x0) & ~0xfffffffe,s);
}
inline void tChpServices::tChangeDetectIRQ_Register::writeChangeDetectErrorIRQ_Acknowledge(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x1) & ~0xfffffffd,s);
}
inline void tChpServices::tChangeDetectIRQ_Register::writeChangeDetectIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x4) & ~0xffffffef,s);
}
inline void tChpServices::tChangeDetectIRQ_Register::writeChangeDetectIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x5) & ~0xffffffdf,s);
}
inline void tChpServices::tChangeDetectIRQ_Register::writeChangeDetectErrorIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x6) & ~0xffffffbf,s);
}
inline void tChpServices::tChangeDetectIRQ_Register::writeChangeDetectErrorIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u32(fieldValue) << 0x7) & ~0xffffff7f,s);
}
inline tChpServices::tIntForwarding_ControlStatus::tIntForwarding_ControlStatus()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tIntForwarding_ControlStatus::tRegisterMap* tChpServices::tIntForwarding_ControlStatus::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tIntForwarding_ControlStatus::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tChpServices::tIntForwarding_ControlStatus::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tIntForwarding_ControlStatus::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tIntForwarding_ControlStatus::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tChpServices::tId)kId, s);
}

inline tChpServices::tIntForwarding_ControlStatus& tChpServices::tIntForwarding_ControlStatus::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tChpServices::tIntForwarding_ControlStatus::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tIntForwarding_ControlStatus::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xfffffffc);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tChpServices::tIntForwarding_ControlStatus::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline void tChpServices::tIntForwarding_ControlStatus::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tChpServices::tIntForwarding_ControlStatus::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tIntForwarding_ControlStatus& tChpServices::tIntForwarding_ControlStatus::setIntForwarding_Enable(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffe) | ((u32(fieldValue) << 0x0) & ~0xfffffffe);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tIntForwarding_ControlStatus::getIntForwarding_Enable(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xfffffffe) >> 0x0);
}

inline void tChpServices::tIntForwarding_ControlStatus::writeIntForwarding_Enable(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setIntForwarding_Enable(fieldValue, s);
   flush(s, force);
}
inline u32 tChpServices::tIntForwarding_ControlStatus::readIntForwarding_Enable(nMDBG::tStatus2* s)
{
   refresh(s);
   return getIntForwarding_Enable(s);
}

inline tChpServices::tIntForwarding_ControlStatus& tChpServices::tIntForwarding_ControlStatus::setIntForwarding_Reset(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffffd) | ((u32(fieldValue) << 0x1) & ~0xfffffffd);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tIntForwarding_ControlStatus::getIntForwarding_Reset(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xfffffffd) >> 0x1);
}

inline void tChpServices::tIntForwarding_ControlStatus::writeIntForwarding_Reset(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setIntForwarding_Reset(fieldValue, s);
   flush(s, force);
}
inline u32 tChpServices::tIntForwarding_ControlStatus::readIntForwarding_Reset(nMDBG::tStatus2* s)
{
   refresh(s);
   return getIntForwarding_Reset(s);
}

inline tChpServices::tIntForwarding_DestinationReg::tIntForwarding_DestinationReg()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tIntForwarding_DestinationReg::tRegisterMap* tChpServices::tIntForwarding_DestinationReg::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tIntForwarding_DestinationReg::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tChpServices::tIntForwarding_DestinationReg::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tIntForwarding_DestinationReg::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tIntForwarding_DestinationReg::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tChpServices::tId)kId, s);
}

inline tChpServices::tIntForwarding_DestinationReg& tChpServices::tIntForwarding_DestinationReg::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tChpServices::tIntForwarding_DestinationReg::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tIntForwarding_DestinationReg::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tChpServices::tIntForwarding_DestinationReg::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline void tChpServices::tIntForwarding_DestinationReg::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tChpServices::tIntForwarding_DestinationReg::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tIntForwarding_DestinationReg& tChpServices::tIntForwarding_DestinationReg::setIntForwarding_Destination(nChpServices::tIntForwarding_Destination_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffffff00) | ((u32(fieldValue) << 0x0) & ~0xffffff00);
   setRegister(newValue, s);
   return *this;
}

inline nChpServices::tIntForwarding_Destination_t tChpServices::tIntForwarding_DestinationReg::getIntForwarding_Destination(nMDBG::tStatus2*) const
{
   return nChpServices::tIntForwarding_Destination_t((_softCopy & ~0xffffff00) >> 0x0);
}

inline void tChpServices::tIntForwarding_DestinationReg::writeIntForwarding_Destination(nChpServices::tIntForwarding_Destination_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setIntForwarding_Destination(fieldValue, s);
   flush(s, force);
}
inline nChpServices::tIntForwarding_Destination_t tChpServices::tIntForwarding_DestinationReg::readIntForwarding_Destination(nMDBG::tStatus2* s)
{
   refresh(s);
   return getIntForwarding_Destination(s);
}

inline tChpServices::tScratchPadRegister::tScratchPadRegister()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tScratchPadRegister::tRegisterMap* tChpServices::tScratchPadRegister::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tScratchPadRegister::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tChpServices::tScratchPadRegister::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tScratchPadRegister::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tScratchPadRegister::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tChpServices::tId)kId, s);
}

inline tChpServices::tScratchPadRegister& tChpServices::tScratchPadRegister::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tChpServices::tScratchPadRegister::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tScratchPadRegister::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tChpServices::tScratchPadRegister::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline void tChpServices::tScratchPadRegister::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tChpServices::tScratchPadRegister::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tScratchPadRegister& tChpServices::tScratchPadRegister::setScratch_Pad(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x0) | ((u32(fieldValue) << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tScratchPadRegister::getScratch_Pad(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0x0) >> 0x0);
}

inline void tChpServices::tScratchPadRegister::writeScratch_Pad(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setScratch_Pad(fieldValue, s);
   flush(s, force);
}
inline u32 tChpServices::tScratchPadRegister::readScratch_Pad(nMDBG::tStatus2* s)
{
   refresh(s);
   return getScratch_Pad(s);
}

inline tChpServices::tSignature_Register::tSignature_Register()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tSignature_Register::tRegisterMap* tChpServices::tSignature_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tSignature_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tChpServices::tSignature_Register& tChpServices::tSignature_Register::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tChpServices::tSignature_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tSignature_Register::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tChpServices::tSignature_Register::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tSignature_Register& tChpServices::tSignature_Register::setSTC3_Revision(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x0) | ((u32(fieldValue) << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tSignature_Register::getSTC3_Revision(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0x0) >> 0x0);
}

inline u32 tChpServices::tSignature_Register::readSTC3_Revision(nMDBG::tStatus2* s)
{
   refresh(s);
   return getSTC3_Revision(s);
}

inline tChpServices::tJoint_Reset_Register::tJoint_Reset_Register()
{
}

inline tChpServices::tJoint_Reset_Register::tRegisterMap* tChpServices::tJoint_Reset_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tJoint_Reset_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline void tChpServices::tJoint_Reset_Register::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), fieldValue, s);
}

inline void tChpServices::tJoint_Reset_Register::writeSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u16(fieldValue) << 0x0) & ~0xfffe,s);
}
inline tChpServices::tTimeSincePowerUpRegister::tTimeSincePowerUpRegister()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tTimeSincePowerUpRegister::tRegisterMap* tChpServices::tTimeSincePowerUpRegister::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tTimeSincePowerUpRegister::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tChpServices::tTimeSincePowerUpRegister& tChpServices::tTimeSincePowerUpRegister::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tChpServices::tTimeSincePowerUpRegister::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tTimeSincePowerUpRegister::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tChpServices::tTimeSincePowerUpRegister::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tTimeSincePowerUpRegister& tChpServices::tTimeSincePowerUpRegister::setTimeSincePowerUpValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x0) | ((u32(fieldValue) << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tTimeSincePowerUpRegister::getTimeSincePowerUpValue(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0x0) >> 0x0);
}

inline u32 tChpServices::tTimeSincePowerUpRegister::readTimeSincePowerUpValue(nMDBG::tStatus2* s)
{
   refresh(s);
   return getTimeSincePowerUpValue(s);
}

inline tChpServices::tWatchdogStatusRegister::tWatchdogStatusRegister()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tWatchdogStatusRegister::tRegisterMap* tChpServices::tWatchdogStatusRegister::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tWatchdogStatusRegister::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tChpServices::tWatchdogStatusRegister& tChpServices::tWatchdogStatusRegister::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   _softCopy = fieldValue;
   return *this;
}

inline u32 tChpServices::tWatchdogStatusRegister::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tWatchdogStatusRegister::refresh(nMDBG::tStatus2* s)
{
   _softCopy = tIOStrategy::read(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), s);
}

inline u32 tChpServices::tWatchdogStatusRegister::readRegister(nMDBG::tStatus2* s)
{
   refresh(s);
   return _softCopy;
}

inline tChpServices::tWatchdogStatusRegister& tChpServices::tWatchdogStatusRegister::setWatchdogSM_State(nChpServices::tChpSrv_WatchdogTimerStateMachineSt_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xfffffff8) | ((u32(fieldValue) << 0x0) & ~0xfffffff8);
   setRegister(newValue, s);
   return *this;
}

inline nChpServices::tChpSrv_WatchdogTimerStateMachineSt_t tChpServices::tWatchdogStatusRegister::getWatchdogSM_State(nMDBG::tStatus2*) const
{
   return nChpServices::tChpSrv_WatchdogTimerStateMachineSt_t((_softCopy & ~0xfffffff8) >> 0x0);
}

inline nChpServices::tChpSrv_WatchdogTimerStateMachineSt_t tChpServices::tWatchdogStatusRegister::readWatchdogSM_State(nMDBG::tStatus2* s)
{
   refresh(s);
   return getWatchdogSM_State(s);
}

inline tChpServices::tWatchdogStatusRegister& tChpServices::tWatchdogStatusRegister::setWatchdogExpiredCnt(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0xffff00ff) | ((u32(fieldValue) << 0x8) & ~0xffff00ff);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tWatchdogStatusRegister::getWatchdogExpiredCnt(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0xffff00ff) >> 0x8);
}

inline u32 tChpServices::tWatchdogStatusRegister::readWatchdogExpiredCnt(nMDBG::tStatus2* s)
{
   refresh(s);
   return getWatchdogExpiredCnt(s);
}

inline tChpServices::tWatchdogTimeoutRegister::tWatchdogTimeoutRegister()
{
   _softCopy = u32(0x0);
}

inline tChpServices::tWatchdogTimeoutRegister::tRegisterMap* tChpServices::tWatchdogTimeoutRegister::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tWatchdogTimeoutRegister::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tChpServices::tWatchdogTimeoutRegister::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tWatchdogTimeoutRegister::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tWatchdogTimeoutRegister::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tChpServices::tId)kId, s);
}

inline tChpServices::tWatchdogTimeoutRegister& tChpServices::tWatchdogTimeoutRegister::setRegister(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u32 tChpServices::tWatchdogTimeoutRegister::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tWatchdogTimeoutRegister::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u32(0xffffffff);
      _softCopy |= u32(0x0);
      markClean(s);
   }
}

inline void tChpServices::tWatchdogTimeoutRegister::writeRegister(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u32 tChpServices::tWatchdogTimeoutRegister::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tChpServices::tWatchdogTimeoutRegister& tChpServices::tWatchdogTimeoutRegister::setWatchdogTimeoutValue(u32 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u32 newValue;   newValue = (_softCopy & 0x0) | ((u32(fieldValue) << 0x0) & ~0x0);
   setRegister(newValue, s);
   return *this;
}

inline u32 tChpServices::tWatchdogTimeoutRegister::getWatchdogTimeoutValue(nMDBG::tStatus2*) const
{
   return u32((_softCopy & ~0x0) >> 0x0);
}

inline void tChpServices::tWatchdogTimeoutRegister::writeWatchdogTimeoutValue(u32 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setWatchdogTimeoutValue(fieldValue, s);
   flush(s, force);
}
inline u32 tChpServices::tWatchdogTimeoutRegister::readWatchdogTimeoutValue(nMDBG::tStatus2* s)
{
   return getWatchdogTimeoutValue(s);
}

inline tChpServices::tWatchdogConfiguration::tWatchdogConfiguration()
{
   _softCopy = u16(0x0);
}

inline tChpServices::tWatchdogConfiguration::tRegisterMap* tChpServices::tWatchdogConfiguration::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tWatchdogConfiguration::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tChpServices::tWatchdogConfiguration::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tWatchdogConfiguration::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tWatchdogConfiguration::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tChpServices::tId)kId, s);
}

inline tChpServices::tWatchdogConfiguration& tChpServices::tWatchdogConfiguration::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tChpServices::tWatchdogConfiguration::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tWatchdogConfiguration::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tChpServices::tWatchdogConfiguration::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tChpServices::tWatchdogConfiguration::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tChpServices::tWatchdogConfiguration& tChpServices::tWatchdogConfiguration::setWatchdogExtTrigSel(nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfff8) | ((u16(fieldValue) << 0x0) & ~0xfff8);
   setRegister(newValue, s);
   return *this;
}

inline nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t tChpServices::tWatchdogConfiguration::getWatchdogExtTrigSel(nMDBG::tStatus2*) const
{
   return nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t((_softCopy & ~0xfff8) >> 0x0);
}

inline void tChpServices::tWatchdogConfiguration::writeWatchdogExtTrigSel(nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setWatchdogExtTrigSel(fieldValue, s);
   flush(s, force);
}
inline nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t tChpServices::tWatchdogConfiguration::readWatchdogExtTrigSel(nMDBG::tStatus2* s)
{
   return getWatchdogExtTrigSel(s);
}

inline tChpServices::tWatchdogConfiguration& tChpServices::tWatchdogConfiguration::setWatchdogExtTrigPol(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff7f) | ((u16(fieldValue) << 0x7) & ~0xff7f);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tWatchdogConfiguration::getWatchdogExtTrigPol(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff7f) >> 0x7);
}

inline void tChpServices::tWatchdogConfiguration::writeWatchdogExtTrigPol(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setWatchdogExtTrigPol(fieldValue, s);
   flush(s, force);
}
inline u16 tChpServices::tWatchdogConfiguration::readWatchdogExtTrigPol(nMDBG::tStatus2* s)
{
   return getWatchdogExtTrigPol(s);
}

inline tChpServices::tWatchdogConfiguration& tChpServices::tWatchdogConfiguration::setWatchdogExtTrigEn(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfeff) | ((u16(fieldValue) << 0x8) & ~0xfeff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tWatchdogConfiguration::getWatchdogExtTrigEn(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xfeff) >> 0x8);
}

inline void tChpServices::tWatchdogConfiguration::writeWatchdogExtTrigEn(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setWatchdogExtTrigEn(fieldValue, s);
   flush(s, force);
}
inline u16 tChpServices::tWatchdogConfiguration::readWatchdogExtTrigEn(nMDBG::tStatus2* s)
{
   return getWatchdogExtTrigEn(s);
}

inline tChpServices::tWatchdogConfiguration& tChpServices::tWatchdogConfiguration::setWatchdogIntTrigEn(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xfdff) | ((u16(fieldValue) << 0x9) & ~0xfdff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tWatchdogConfiguration::getWatchdogIntTrigEn(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xfdff) >> 0x9);
}

inline void tChpServices::tWatchdogConfiguration::writeWatchdogIntTrigEn(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setWatchdogIntTrigEn(fieldValue, s);
   flush(s, force);
}
inline u16 tChpServices::tWatchdogConfiguration::readWatchdogIntTrigEn(nMDBG::tStatus2* s)
{
   return getWatchdogIntTrigEn(s);
}

inline tChpServices::tWatchdogControl::tWatchdogControl()
{
}

inline tChpServices::tWatchdogControl::tRegisterMap* tChpServices::tWatchdogControl::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tWatchdogControl::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline void tChpServices::tWatchdogControl::writeRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;
   tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), fieldValue, s);
}

inline void tChpServices::tWatchdogControl::writeWatchdogCommand(u16 fieldValue, nMDBG::tStatus2* s)
{
   writeRegister((u16(fieldValue) << 0x0) & ~0x0,s);
}
inline tChpServices::tRTSI_Trig_Direction_Register::tRTSI_Trig_Direction_Register()
{
   _softCopy = u16(0x0);
}

inline tChpServices::tRTSI_Trig_Direction_Register::tRegisterMap* tChpServices::tRTSI_Trig_Direction_Register::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tRTSI_Trig_Direction_Register::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tChpServices::tRTSI_Trig_Direction_Register::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tRTSI_Trig_Direction_Register::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tRTSI_Trig_Direction_Register::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tChpServices::tId)kId, s);
}

inline tChpServices::tRTSI_Trig_Direction_Register& tChpServices::tRTSI_Trig_Direction_Register::setRegister(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u16 tChpServices::tRTSI_Trig_Direction_Register::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tRTSI_Trig_Direction_Register::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u16(0xffff);
      _softCopy |= u16(0x0);
      markClean(s);
   }
}

inline void tChpServices::tRTSI_Trig_Direction_Register::writeRegister(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u16 tChpServices::tRTSI_Trig_Direction_Register::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tChpServices::tRTSI_Trig_Direction_Register& tChpServices::tRTSI_Trig_Direction_Register::setRTSIDirection(u16 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u16 newValue;   newValue = (_softCopy & 0xff) | ((u16(fieldValue) << 0x8) & ~0xff);
   setRegister(newValue, s);
   return *this;
}

inline u16 tChpServices::tRTSI_Trig_Direction_Register::getRTSIDirection(nMDBG::tStatus2*) const
{
   return u16((_softCopy & ~0xff) >> 0x8);
}

inline void tChpServices::tRTSI_Trig_Direction_Register::writeRTSIDirection(u16 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setRTSIDirection(fieldValue, s);
   flush(s, force);
}
inline u16 tChpServices::tRTSI_Trig_Direction_Register::readRTSIDirection(nMDBG::tStatus2* s)
{
   return getRTSIDirection(s);
}

inline tChpServices::tRTSI_OutputSelectRegister_t::tRTSI_OutputSelectRegister_t(u32 offset, u32 id)
 : kOffset(offset),
   kId(id)
{
   _softCopy = u8(0x0);
}

inline tChpServices::tRTSI_OutputSelectRegister_t::tRTSI_OutputSelectRegister_t()
 : kOffset((u32)~0),
   kId((u32)~0)
{
   _softCopy = u8(0x0);
}

inline void tChpServices::tRTSI_OutputSelectRegister_t::initialize(u32 offset, u32 id)
{
   u32* mutableOffset = const_cast<u32*>(&this->kOffset);
   u32* mutableId     = const_cast<u32*>(&this->kId);
   *mutableOffset = offset;
   *mutableId = id;
}

inline tChpServices::tRTSI_OutputSelectRegister_t::tRegisterMap* tChpServices::tRTSI_OutputSelectRegister_t::registerMap(void)
{
   return _regMap;
}

inline void tChpServices::tRTSI_OutputSelectRegister_t::setRegisterMap(tRegisterMap* pRegMap)
{
   _regMap = pRegMap;
}

inline tBoolean tChpServices::tRTSI_OutputSelectRegister_t::isDirty(nMDBG::tStatus2* s)
{
   return _regMap->isDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tRTSI_OutputSelectRegister_t::markDirty(nMDBG::tStatus2* s)
{
   _regMap->markDirty((tChpServices::tId)kId, s);
}

inline void tChpServices::tRTSI_OutputSelectRegister_t::markClean(nMDBG::tStatus2* s)
{
   _regMap->markClean((tChpServices::tId)kId, s);
}

inline tChpServices::tRTSI_OutputSelectRegister_t& tChpServices::tRTSI_OutputSelectRegister_t::setRegister(u8 fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   if (_softCopy != fieldValue) {
      _softCopy = fieldValue;
      markDirty(s);
   }
   return *this;
}

inline u8 tChpServices::tRTSI_OutputSelectRegister_t::getRegister(nMDBG::tStatus2*) const
{
   return _softCopy;
}

inline void tChpServices::tRTSI_OutputSelectRegister_t::flush(nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   if (force || isDirty(s)) {
      tIOStrategy::write(_regMap->getBusSpaceReference(), kOffset + _regMap->getAddressOffset(s), _softCopy, s);
      _softCopy &= u8(0xff);
      _softCopy |= u8(0x0);
      markClean(s);
   }
}

inline void tChpServices::tRTSI_OutputSelectRegister_t::writeRegister(u8 fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   if (s && s->isFatal()) return;
   force = force || (_softCopy != fieldValue);
   _softCopy = fieldValue;
   flush(s, force);
}

inline u8 tChpServices::tRTSI_OutputSelectRegister_t::readRegister(nMDBG::tStatus2*)
{
   return _softCopy;
}


inline tChpServices::tRTSI_OutputSelectRegister_t& tChpServices::tRTSI_OutputSelectRegister_t::setRTSI_i_Output_Select(nChpServices::tRTSI_Output_Select_t fieldValue, nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return *this;
   u8 newValue;   newValue = (_softCopy & 0x80) | ((u8(fieldValue) << 0x0) & ~0x80);
   setRegister(newValue, s);
   return *this;
}

inline nChpServices::tRTSI_Output_Select_t tChpServices::tRTSI_OutputSelectRegister_t::getRTSI_i_Output_Select(nMDBG::tStatus2*) const
{
   return nChpServices::tRTSI_Output_Select_t((_softCopy & ~0x80) >> 0x0);
}

inline void tChpServices::tRTSI_OutputSelectRegister_t::writeRTSI_i_Output_Select(nChpServices::tRTSI_Output_Select_t fieldValue, nMDBG::tStatus2* s, tBoolean force)
{
   setRTSI_i_Output_Select(fieldValue, s);
   flush(s, force);
}
inline nChpServices::tRTSI_Output_Select_t tChpServices::tRTSI_OutputSelectRegister_t::readRTSI_i_Output_Select(nMDBG::tStatus2* s)
{
   return getRTSI_i_Output_Select(s);
}

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

