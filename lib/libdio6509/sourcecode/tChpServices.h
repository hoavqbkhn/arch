// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tChpServices_h___
#define ___tChpServices_h___

// includes
#include "osiTypes.h"
#include "osiBus.h"
#include "tChpServicesValues.h"


#ifndef ___tChpServicesValues_h___
#include "tChpServicesValues.h"
#endif

#ifndef nNIMXRegisterMap120_mBuildFieldId

// Algorithm:
//    Move lowermost 5 bits (4 through 0) of field id to uppermost 5 bits (31
//          through 27)
//    Move bit 5 of field id to bit 26
//    Move bit 6 of field id to bit 25
//    OR in the register id (which is allowed the remaining bits)
//
// Why not move the lowermost 7 bits directly to the uppermost 7 bits? Because
// we originally moved only the lowermost 5, and for backwards compatibility,
// we can't change where those 5 bits end up.
//
// For future expansion purposes, the bits beyond the first 5 are put in reverse
// order in the resulting combined id.
#define nNIMXRegisterMap120_mBuildFieldId(fieldId, regId) \
   ( \
     ((fieldId) << 27) | \
     ((((fieldId) >> 5) & 0x1) << 26) | \
     ((((fieldId) >> 6) & 0x1) << 25) | \
     (regId) \
   )

#endif

#ifndef nNIMXRegisterMap120_mExtractFieldId

// Algorithm: (basically the reverse of mBuildFieldId)
//    Move uppermost 5 bits (31 through 27) to lowermost 5 bits (4 through 0)
//    Move 26th bit to bit 5 (right-shifting by (26 - 5) is like right-shifting
//          by 26 then left-shifting by 5, but it's more efficient)
//    Move 25th bit to bit 6
#define nNIMXRegisterMap120_mExtractFieldId(id) \
   (unsigned int) \
   ( \
     (((id) >> 27) & 0x1F) | \
     (((id) & (0x1 << 26)) >> (26 - 5)) | \
     (((id) & (0x1 << 25)) >> (25 - 6)) \
   )

#endif

class tChpServices
{
public:
   //---------------------------------------------------------------------------
   // IO Strategies
   //---------------------------------------------------------------------------
   class tReg8IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u8 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u8 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg16IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u16 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u16 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   class tReg32IODirect32
   {
   public:
      inline void write(
         tBusSpaceReference addrSpace,
         u32 offset,
         u32 value,
         nMDBG::tStatus2* statusChain = NULL);

      inline u32 read(
         tBusSpaceReference addrSpace,
         u32 offset,
         nMDBG::tStatus2* statusChain = NULL);
   };

   //---------------------------------------------------------------------------
   // GlobalInterruptStatus_Register
   //---------------------------------------------------------------------------
   class tGlobalInterruptStatus_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x70,
         kId     = 0
      };
      tGlobalInterruptStatus_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_Interrupt_StatusId            = 7,
         kWatchdogTimer_Interrupt_StatusId   = 11,
         kMaxFieldId                          = 11
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tGlobalInterruptStatus_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tGlobalInterruptStatus_Register& setDI_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getDI_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readDI_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      inline tGlobalInterruptStatus_Register& setWatchdogTimer_Interrupt_Status(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogTimer_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readWatchdogTimer_Interrupt_Status(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tGlobalInterruptStatus_Register(const tGlobalInterruptStatus_Register&);
      tGlobalInterruptStatus_Register& operator=(const tGlobalInterruptStatus_Register&);

   };

   //---------------------------------------------------------------------------
   // GlobalInterruptEnable_Register
   //---------------------------------------------------------------------------
   class tGlobalInterruptEnable_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x78,
         kId     = 1
      };
      tGlobalInterruptEnable_Register();


      typedef enum {
         kRegisterId                          = 0,
         kDI_Interrupt_EnableId            = 7,
         kWatchdogTimer_Interrupt_EnableId   = 11,
         kDI_Interrupt_DisableId           = 19,
         kWatchdogTimerInterrupt_DisableId   = 23,
         kMaxFieldId                          = 23
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeDI_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeWatchdogTimer_Interrupt_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeDI_Interrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeWatchdogTimerInterrupt_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tGlobalInterruptEnable_Register(const tGlobalInterruptEnable_Register&);
      tGlobalInterruptEnable_Register& operator=(const tGlobalInterruptEnable_Register&);

   };

   //---------------------------------------------------------------------------
   // DI_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   class tDI_Interrupt_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x7e,
         kId     = 2
      };
      tDI_Interrupt_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kChangeDetectionIrqStId           = 1,
         kChangeDetectionErrorIrqStId      = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tDI_Interrupt_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tDI_Interrupt_Status_Register& setChangeDetectionIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getChangeDetectionIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readChangeDetectionIrqSt(nMDBG::tStatus2* statusChain = NULL);

      inline tDI_Interrupt_Status_Register& setChangeDetectionErrorIrqSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getChangeDetectionErrorIrqSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readChangeDetectionErrorIrqSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tDI_Interrupt_Status_Register(const tDI_Interrupt_Status_Register&);
      tDI_Interrupt_Status_Register& operator=(const tDI_Interrupt_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // WatchdogTimer_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   class tWatchdogTimer_Interrupt_Status_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x86,
         kId     = 3
      };
      tWatchdogTimer_Interrupt_Status_Register();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogTimerTriggerStId         = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tWatchdogTimer_Interrupt_Status_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tWatchdogTimer_Interrupt_Status_Register& setWatchdogTimerTriggerSt(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogTimerTriggerSt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u16 readWatchdogTimerTriggerSt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogTimer_Interrupt_Status_Register(const tWatchdogTimer_Interrupt_Status_Register&);
      tWatchdogTimer_Interrupt_Status_Register& operator=(const tWatchdogTimer_Interrupt_Status_Register&);

   };

   //---------------------------------------------------------------------------
   // WatchdogTimer_Interrupt1_Register
   //---------------------------------------------------------------------------
   class tWatchdogTimer_Interrupt1_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x70,
         kId     = 4
      };
      tWatchdogTimer_Interrupt1_Register();


      typedef enum {
         kRegisterId                          = 0,
         kWDT_TriggerIRQ_EnableId          = 1,
         kWDT_TriggerIRQ_AckId             = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeWDT_TriggerIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeWDT_TriggerIRQ_Ack(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogTimer_Interrupt1_Register(const tWatchdogTimer_Interrupt1_Register&);
      tWatchdogTimer_Interrupt1_Register& operator=(const tWatchdogTimer_Interrupt1_Register&);

   };

   //---------------------------------------------------------------------------
   // WatchdogTimer_Interrupt2_Register
   //---------------------------------------------------------------------------
   class tWatchdogTimer_Interrupt2_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x74,
         kId     = 5
      };
      tWatchdogTimer_Interrupt2_Register();


      typedef enum {
         kRegisterId                          = 0,
         kWDT_TriggerIRQ_DisableId         = 1,
         kWDT_TriggerIRQ_Ack2Id            = 4,
         kMaxFieldId                          = 4
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeWDT_TriggerIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeWDT_TriggerIRQ_Ack2(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogTimer_Interrupt2_Register(const tWatchdogTimer_Interrupt2_Register&);
      tWatchdogTimer_Interrupt2_Register& operator=(const tWatchdogTimer_Interrupt2_Register&);

   };

   //---------------------------------------------------------------------------
   // ChangeDetectStatusRegister
   //---------------------------------------------------------------------------
   class tChangeDetectStatusRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x540,
         kId     = 6
      };
      tChangeDetectStatusRegister();


      typedef enum {
         kRegisterId                          = 0,
         kChangeDetectStatusId             = 1,
         kChangeDetectErrorId              = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tChangeDetectStatusRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tChangeDetectStatusRegister& setChangeDetectStatus(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getChangeDetectStatus(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readChangeDetectStatus(nMDBG::tStatus2* statusChain = NULL);

      inline tChangeDetectStatusRegister& setChangeDetectError(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getChangeDetectError(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readChangeDetectError(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tChangeDetectStatusRegister(const tChangeDetectStatusRegister&);
      tChangeDetectStatusRegister& operator=(const tChangeDetectStatusRegister&);

   };

   //---------------------------------------------------------------------------
   // ChangeDetectIRQ_Register
   //---------------------------------------------------------------------------
   class tChangeDetectIRQ_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x554,
         kId     = 7
      };
      tChangeDetectIRQ_Register();


      typedef enum {
         kRegisterId                          = 0,
         kChangeDetectIRQ_AcknowledgeId    = 1,
         kChangeDetectErrorIRQ_AcknowledgeId     = 2,
         kChangeDetectIRQ_DisableId        = 4,
         kChangeDetectIRQ_EnableId         = 5,
         kChangeDetectErrorIRQ_DisableId   = 6,
         kChangeDetectErrorIRQ_EnableId    = 7,
         kMaxFieldId                          = 7
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeChangeDetectIRQ_Acknowledge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectErrorIRQ_Acknowledge(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectErrorIRQ_Disable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      inline void writeChangeDetectErrorIRQ_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tChangeDetectIRQ_Register(const tChangeDetectIRQ_Register&);
      tChangeDetectIRQ_Register& operator=(const tChangeDetectIRQ_Register&);

   };

   //---------------------------------------------------------------------------
   // IntForwarding_ControlStatus
   //---------------------------------------------------------------------------
   class tIntForwarding_ControlStatus : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x2204,
         kId     = 8
      };
      tIntForwarding_ControlStatus();


      typedef enum {
         kRegisterId                          = 0,
         kIntForwarding_EnableId           = 1,
         kIntForwarding_ResetId            = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tIntForwarding_ControlStatus& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tIntForwarding_ControlStatus& setIntForwarding_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getIntForwarding_Enable(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeIntForwarding_Enable(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readIntForwarding_Enable(nMDBG::tStatus2* statusChain = NULL);

      inline tIntForwarding_ControlStatus& setIntForwarding_Reset(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getIntForwarding_Reset(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeIntForwarding_Reset(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readIntForwarding_Reset(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tIntForwarding_ControlStatus(const tIntForwarding_ControlStatus&);
      tIntForwarding_ControlStatus& operator=(const tIntForwarding_ControlStatus&);

   };

   //---------------------------------------------------------------------------
   // IntForwarding_DestinationReg
   //---------------------------------------------------------------------------
   class tIntForwarding_DestinationReg : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x2208,
         kId     = 9
      };
      tIntForwarding_DestinationReg();


      typedef enum {
         kRegisterId                          = 0,
         kIntForwarding_DestinationId      = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tIntForwarding_DestinationReg& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tIntForwarding_DestinationReg& setIntForwarding_Destination(nChpServices::tIntForwarding_Destination_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nChpServices::tIntForwarding_Destination_t getIntForwarding_Destination(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeIntForwarding_Destination(nChpServices::tIntForwarding_Destination_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nChpServices::tIntForwarding_Destination_t readIntForwarding_Destination(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tIntForwarding_DestinationReg(const tIntForwarding_DestinationReg&);
      tIntForwarding_DestinationReg& operator=(const tIntForwarding_DestinationReg&);

   };

   //---------------------------------------------------------------------------
   // ScratchPadRegister
   //---------------------------------------------------------------------------
   class tScratchPadRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x4,
         kId     = 10
      };
      tScratchPadRegister();


      typedef enum {
         kRegisterId                          = 0,
         kScratch_PadId                    = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tScratchPadRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tScratchPadRegister& setScratch_Pad(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getScratch_Pad(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeScratch_Pad(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readScratch_Pad(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tScratchPadRegister(const tScratchPadRegister&);
      tScratchPadRegister& operator=(const tScratchPadRegister&);

   };

   //---------------------------------------------------------------------------
   // Signature_Register
   //---------------------------------------------------------------------------
   class tSignature_Register : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x60,
         kId     = 11
      };
      tSignature_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSTC3_RevisionId                  = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tSignature_Register& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tSignature_Register& setSTC3_Revision(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getSTC3_Revision(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readSTC3_Revision(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tSignature_Register(const tSignature_Register&);
      tSignature_Register& operator=(const tSignature_Register&);

   };

   //---------------------------------------------------------------------------
   // Joint_Reset_Register
   //---------------------------------------------------------------------------
   class tJoint_Reset_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x64,
         kId     = 12
      };
      tJoint_Reset_Register();


      typedef enum {
         kRegisterId                          = 0,
         kSoftware_ResetId                 = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeSoftware_Reset(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tJoint_Reset_Register(const tJoint_Reset_Register&);
      tJoint_Reset_Register& operator=(const tJoint_Reset_Register&);

   };

   //---------------------------------------------------------------------------
   // TimeSincePowerUpRegister
   //---------------------------------------------------------------------------
   class tTimeSincePowerUpRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x64,
         kId     = 13
      };
      tTimeSincePowerUpRegister();


      typedef enum {
         kRegisterId                          = 0,
         kTimeSincePowerUpValueId          = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tTimeSincePowerUpRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tTimeSincePowerUpRegister& setTimeSincePowerUpValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getTimeSincePowerUpValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readTimeSincePowerUpValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tTimeSincePowerUpRegister(const tTimeSincePowerUpRegister&);
      tTimeSincePowerUpRegister& operator=(const tTimeSincePowerUpRegister&);

   };

   //---------------------------------------------------------------------------
   // WatchdogStatusRegister
   //---------------------------------------------------------------------------
   class tWatchdogStatusRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x68,
         kId     = 14
      };
      tWatchdogStatusRegister();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogSM_StateId               = 1,
         kWatchdogExpiredCntId             = 3,
         kMaxFieldId                          = 3
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)
      inline tWatchdogStatusRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void refresh(nMDBG::tStatus2* statusChain = NULL);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tWatchdogStatusRegister& setWatchdogSM_State(nChpServices::tChpSrv_WatchdogTimerStateMachineSt_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nChpServices::tChpSrv_WatchdogTimerStateMachineSt_t getWatchdogSM_State(nMDBG::tStatus2* statusChain = NULL) const;

      inline nChpServices::tChpSrv_WatchdogTimerStateMachineSt_t readWatchdogSM_State(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogStatusRegister& setWatchdogExpiredCnt(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getWatchdogExpiredCnt(nMDBG::tStatus2* statusChain = NULL) const;

      inline u32 readWatchdogExpiredCnt(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogStatusRegister(const tWatchdogStatusRegister&);
      tWatchdogStatusRegister& operator=(const tWatchdogStatusRegister&);

   };

   //---------------------------------------------------------------------------
   // WatchdogTimeoutRegister
   //---------------------------------------------------------------------------
   class tWatchdogTimeoutRegister : public tReg32IODirect32
   {
   public:
      typedef tReg32IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x68,
         kId     = 15
      };
      tWatchdogTimeoutRegister();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogTimeoutValueId           = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tWatchdogTimeoutRegister& setRegister(u32 value, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u32 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tWatchdogTimeoutRegister& setWatchdogTimeoutValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u32 getWatchdogTimeoutValue(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogTimeoutValue(u32 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u32 readWatchdogTimeoutValue(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u32 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogTimeoutRegister(const tWatchdogTimeoutRegister&);
      tWatchdogTimeoutRegister& operator=(const tWatchdogTimeoutRegister&);

   };

   //---------------------------------------------------------------------------
   // WatchdogConfiguration
   //---------------------------------------------------------------------------
   class tWatchdogConfiguration : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x6c,
         kId     = 16
      };
      tWatchdogConfiguration();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogExtTrigSelId             = 1,
         kWatchdogExtTrigPolId             = 3,
         kWatchdogExtTrigEnId              = 4,
         kWatchdogIntTrigEnId              = 5,
         kMaxFieldId                          = 5
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tWatchdogConfiguration& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tWatchdogConfiguration& setWatchdogExtTrigSel(nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t getWatchdogExtTrigSel(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogExtTrigSel(nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nChpServices::tChpSrv_WatchdogTimerExtSrcSel_t readWatchdogExtTrigSel(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogConfiguration& setWatchdogExtTrigPol(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogExtTrigPol(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogExtTrigPol(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readWatchdogExtTrigPol(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogConfiguration& setWatchdogExtTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogExtTrigEn(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogExtTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readWatchdogExtTrigEn(nMDBG::tStatus2* statusChain = NULL);

      inline tWatchdogConfiguration& setWatchdogIntTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getWatchdogIntTrigEn(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeWatchdogIntTrigEn(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readWatchdogIntTrigEn(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogConfiguration(const tWatchdogConfiguration&);
      tWatchdogConfiguration& operator=(const tWatchdogConfiguration&);

   };

   //---------------------------------------------------------------------------
   // WatchdogControl
   //---------------------------------------------------------------------------
   class tWatchdogControl : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0x6e,
         kId     = 17
      };
      tWatchdogControl();


      typedef enum {
         kRegisterId                          = 0,
         kWatchdogCommandId                = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Register Accessors (Compile-time selectable)

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);


      // Field Accessors (Compile-time selectable)
      inline void writeWatchdogCommand(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      tRegisterMap* _regMap;

      // Usage guidelines
      tWatchdogControl(const tWatchdogControl&);
      tWatchdogControl& operator=(const tWatchdogControl&);

   };

   //---------------------------------------------------------------------------
   // RTSI_Trig_Direction_Register
   //---------------------------------------------------------------------------
   class tRTSI_Trig_Direction_Register : public tReg16IODirect32
   {
   public:
      typedef tReg16IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      enum {
         kOffset = 0xa6,
         kId     = 18
      };
      tRTSI_Trig_Direction_Register();


      typedef enum {
         kRegisterId                          = 0,
         kRTSIDirectionId                  = 2,
         kMaxFieldId                          = 2
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tRTSI_Trig_Direction_Register& setRegister(u16 value, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u16 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tRTSI_Trig_Direction_Register& setRTSIDirection(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline u16 getRTSIDirection(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSIDirection(u16 fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u16 readRTSIDirection(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u16 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tRTSI_Trig_Direction_Register(const tRTSI_Trig_Direction_Register&);
      tRTSI_Trig_Direction_Register& operator=(const tRTSI_Trig_Direction_Register&);

   };

   //---------------------------------------------------------------------------
   // RTSI_OutputSelectRegister_t
   //---------------------------------------------------------------------------
   class tRTSI_OutputSelectRegister_t : public tReg8IODirect32
   {
   public:
      typedef tReg8IODirect32 tIOStrategy;
      typedef tChpServices tRegisterMap;

      const u32 kOffset;
      const u32 kId;

      tRTSI_OutputSelectRegister_t(u32 offset, u32 id);
      tRTSI_OutputSelectRegister_t();
      void initialize(u32 offset, u32 id);


      typedef enum {
         kRegisterId                          = 0,
         kRTSI_i_Output_SelectId           = 1,
         kMaxFieldId                          = 1
      } tId;

      inline tRegisterMap* registerMap(void);
      inline void setRegisterMap(tRegisterMap* pRegMap);


      // Dirty Tracking
      inline tBoolean isDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
      inline void markClean(nMDBG::tStatus2* statusChain = NULL);

      // Register Accessors (Compile-time selectable)
      inline tRTSI_OutputSelectRegister_t& setRegister(u8 value, nMDBG::tStatus2* statusChain = NULL);
      inline u8 getRegister(nMDBG::tStatus2* statusChain = NULL) const;

      inline void flush(nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline void writeRegister(u8 value, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline u8 readRegister(nMDBG::tStatus2* statusChain = NULL);

      // Field Accessors (Compile-time selectable)
      inline tRTSI_OutputSelectRegister_t& setRTSI_i_Output_Select(nChpServices::tRTSI_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL);
      inline nChpServices::tRTSI_Output_Select_t getRTSI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL) const;

      inline void writeRTSI_i_Output_Select(nChpServices::tRTSI_Output_Select_t fieldValue, nMDBG::tStatus2* statusChain = NULL, tBoolean force = kFalse);

      inline nChpServices::tRTSI_Output_Select_t readRTSI_i_Output_Select(nMDBG::tStatus2* statusChain = NULL);

      // Run-time selectable Register/Field Accessors
   private:
      u8 _softCopy;

      tRegisterMap* _regMap;

      // Usage guidelines
      tRTSI_OutputSelectRegister_t(const tRTSI_OutputSelectRegister_t&);
      tRTSI_OutputSelectRegister_t& operator=(const tRTSI_OutputSelectRegister_t&);

   };

   //----------------------------------------
   // Register Array Sizes
   //----------------------------------------
   enum {
      kRTSI_OutputSelectRegister_iArraySize = 8
   };

   //---------------------------------------------------------------------------
   // GlobalInterruptStatus_Register
   //---------------------------------------------------------------------------
   tGlobalInterruptStatus_Register GlobalInterruptStatus_Register;

   //---------------------------------------------------------------------------
   // GlobalInterruptEnable_Register
   //---------------------------------------------------------------------------
   tGlobalInterruptEnable_Register GlobalInterruptEnable_Register;

   //---------------------------------------------------------------------------
   // DI_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tDI_Interrupt_Status_Register DI_Interrupt_Status_Register;

   //---------------------------------------------------------------------------
   // WatchdogTimer_Interrupt_Status_Register
   //---------------------------------------------------------------------------
   tWatchdogTimer_Interrupt_Status_Register WatchdogTimer_Interrupt_Status_Register;

   //---------------------------------------------------------------------------
   // WatchdogTimer_Interrupt1_Register
   //---------------------------------------------------------------------------
   tWatchdogTimer_Interrupt1_Register WatchdogTimer_Interrupt1_Register;

   //---------------------------------------------------------------------------
   // WatchdogTimer_Interrupt2_Register
   //---------------------------------------------------------------------------
   tWatchdogTimer_Interrupt2_Register WatchdogTimer_Interrupt2_Register;

   //---------------------------------------------------------------------------
   // ChangeDetectStatusRegister
   //---------------------------------------------------------------------------
   tChangeDetectStatusRegister ChangeDetectStatusRegister;

   //---------------------------------------------------------------------------
   // ChangeDetectIRQ_Register
   //---------------------------------------------------------------------------
   tChangeDetectIRQ_Register ChangeDetectIRQ_Register;

   //---------------------------------------------------------------------------
   // IntForwarding_ControlStatus
   //---------------------------------------------------------------------------
   tIntForwarding_ControlStatus IntForwarding_ControlStatus;

   //---------------------------------------------------------------------------
   // IntForwarding_DestinationReg
   //---------------------------------------------------------------------------
   tIntForwarding_DestinationReg IntForwarding_DestinationReg;

   //---------------------------------------------------------------------------
   // ScratchPadRegister
   //---------------------------------------------------------------------------
   tScratchPadRegister ScratchPadRegister;

   //---------------------------------------------------------------------------
   // Signature_Register
   //---------------------------------------------------------------------------
   tSignature_Register Signature_Register;

   //---------------------------------------------------------------------------
   // Joint_Reset_Register
   //---------------------------------------------------------------------------
   tJoint_Reset_Register Joint_Reset_Register;

   //---------------------------------------------------------------------------
   // TimeSincePowerUpRegister
   //---------------------------------------------------------------------------
   tTimeSincePowerUpRegister TimeSincePowerUpRegister;

   //---------------------------------------------------------------------------
   // WatchdogStatusRegister
   //---------------------------------------------------------------------------
   tWatchdogStatusRegister WatchdogStatusRegister;

   //---------------------------------------------------------------------------
   // WatchdogTimeoutRegister
   //---------------------------------------------------------------------------
   tWatchdogTimeoutRegister WatchdogTimeoutRegister;

   //---------------------------------------------------------------------------
   // WatchdogConfiguration
   //---------------------------------------------------------------------------
   tWatchdogConfiguration WatchdogConfiguration;

   //---------------------------------------------------------------------------
   // WatchdogControl
   //---------------------------------------------------------------------------
   tWatchdogControl WatchdogControl;

   //---------------------------------------------------------------------------
   // RTSI_Trig_Direction_Register
   //---------------------------------------------------------------------------
   tRTSI_Trig_Direction_Register RTSI_Trig_Direction_Register;

   //---------------------------------------------------------------------------
   // RTSI_OutputSelectRegister_i
   //---------------------------------------------------------------------------
   tRTSI_OutputSelectRegister_t RTSI_OutputSelectRegister_i[kRTSI_OutputSelectRegister_iArraySize];

   //---------------------------------------------------------------------------
   // Register Groups
   //---------------------------------------------------------------------------

   //----------------------------------------
   // Register/Field Ids
   //----------------------------------------
   typedef enum {
      kGlobalInterruptStatus_RegisterId   = 0,
      kDI_Interrupt_StatusId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kDI_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),
      kWatchdogTimer_Interrupt_StatusId   = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptStatus_Register::kWatchdogTimer_Interrupt_StatusId, kGlobalInterruptStatus_RegisterId),

      kGlobalInterruptEnable_RegisterId   = 1,
      kDI_Interrupt_EnableId            = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kDI_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kWatchdogTimer_Interrupt_EnableId   = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kWatchdogTimer_Interrupt_EnableId, kGlobalInterruptEnable_RegisterId),
      kDI_Interrupt_DisableId           = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kDI_Interrupt_DisableId, kGlobalInterruptEnable_RegisterId),
      kWatchdogTimerInterrupt_DisableId   = nNIMXRegisterMap120_mBuildFieldId(tGlobalInterruptEnable_Register::kWatchdogTimerInterrupt_DisableId, kGlobalInterruptEnable_RegisterId),

      kDI_Interrupt_Status_RegisterId   = 2,
      kChangeDetectionIrqStId           = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kChangeDetectionIrqStId, kDI_Interrupt_Status_RegisterId),
      kChangeDetectionErrorIrqStId      = nNIMXRegisterMap120_mBuildFieldId(tDI_Interrupt_Status_Register::kChangeDetectionErrorIrqStId, kDI_Interrupt_Status_RegisterId),

      kWatchdogTimer_Interrupt_Status_RegisterId            = 3,
      kWatchdogTimerTriggerStId         = nNIMXRegisterMap120_mBuildFieldId(tWatchdogTimer_Interrupt_Status_Register::kWatchdogTimerTriggerStId, kWatchdogTimer_Interrupt_Status_RegisterId),

      kWatchdogTimer_Interrupt1_RegisterId      = 4,
      kWDT_TriggerIRQ_EnableId          = nNIMXRegisterMap120_mBuildFieldId(tWatchdogTimer_Interrupt1_Register::kWDT_TriggerIRQ_EnableId, kWatchdogTimer_Interrupt1_RegisterId),
      kWDT_TriggerIRQ_AckId             = nNIMXRegisterMap120_mBuildFieldId(tWatchdogTimer_Interrupt1_Register::kWDT_TriggerIRQ_AckId, kWatchdogTimer_Interrupt1_RegisterId),

      kWatchdogTimer_Interrupt2_RegisterId      = 5,
      kWDT_TriggerIRQ_DisableId         = nNIMXRegisterMap120_mBuildFieldId(tWatchdogTimer_Interrupt2_Register::kWDT_TriggerIRQ_DisableId, kWatchdogTimer_Interrupt2_RegisterId),
      kWDT_TriggerIRQ_Ack2Id            = nNIMXRegisterMap120_mBuildFieldId(tWatchdogTimer_Interrupt2_Register::kWDT_TriggerIRQ_Ack2Id, kWatchdogTimer_Interrupt2_RegisterId),

      kChangeDetectStatusRegisterId     = 6,
      kChangeDetectStatusId             = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectStatusRegister::kChangeDetectStatusId, kChangeDetectStatusRegisterId),
      kChangeDetectErrorId              = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectStatusRegister::kChangeDetectErrorId, kChangeDetectStatusRegisterId),

      kChangeDetectIRQ_RegisterId       = 7,
      kChangeDetectIRQ_AcknowledgeId    = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectIRQ_Register::kChangeDetectIRQ_AcknowledgeId, kChangeDetectIRQ_RegisterId),
      kChangeDetectErrorIRQ_AcknowledgeId     = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectIRQ_Register::kChangeDetectErrorIRQ_AcknowledgeId, kChangeDetectIRQ_RegisterId),
      kChangeDetectIRQ_DisableId        = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectIRQ_Register::kChangeDetectIRQ_DisableId, kChangeDetectIRQ_RegisterId),
      kChangeDetectIRQ_EnableId         = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectIRQ_Register::kChangeDetectIRQ_EnableId, kChangeDetectIRQ_RegisterId),
      kChangeDetectErrorIRQ_DisableId   = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectIRQ_Register::kChangeDetectErrorIRQ_DisableId, kChangeDetectIRQ_RegisterId),
      kChangeDetectErrorIRQ_EnableId    = nNIMXRegisterMap120_mBuildFieldId(tChangeDetectIRQ_Register::kChangeDetectErrorIRQ_EnableId, kChangeDetectIRQ_RegisterId),

      kIntForwarding_ControlStatusId    = 8,
      kIntForwarding_EnableId           = nNIMXRegisterMap120_mBuildFieldId(tIntForwarding_ControlStatus::kIntForwarding_EnableId, kIntForwarding_ControlStatusId),
      kIntForwarding_ResetId            = nNIMXRegisterMap120_mBuildFieldId(tIntForwarding_ControlStatus::kIntForwarding_ResetId, kIntForwarding_ControlStatusId),

      kIntForwarding_DestinationRegId   = 9,
      kIntForwarding_DestinationId      = nNIMXRegisterMap120_mBuildFieldId(tIntForwarding_DestinationReg::kIntForwarding_DestinationId, kIntForwarding_DestinationRegId),

      kScratchPadRegisterId             = 10,
      kScratch_PadId                    = nNIMXRegisterMap120_mBuildFieldId(tScratchPadRegister::kScratch_PadId, kScratchPadRegisterId),

      kSignature_RegisterId             = 11,
      kSTC3_RevisionId                  = nNIMXRegisterMap120_mBuildFieldId(tSignature_Register::kSTC3_RevisionId, kSignature_RegisterId),

      kJoint_Reset_RegisterId           = 12,
      kSoftware_ResetId                 = nNIMXRegisterMap120_mBuildFieldId(tJoint_Reset_Register::kSoftware_ResetId, kJoint_Reset_RegisterId),

      kTimeSincePowerUpRegisterId       = 13,
      kTimeSincePowerUpValueId          = nNIMXRegisterMap120_mBuildFieldId(tTimeSincePowerUpRegister::kTimeSincePowerUpValueId, kTimeSincePowerUpRegisterId),

      kWatchdogStatusRegisterId         = 14,
      kWatchdogSM_StateId               = nNIMXRegisterMap120_mBuildFieldId(tWatchdogStatusRegister::kWatchdogSM_StateId, kWatchdogStatusRegisterId),
      kWatchdogExpiredCntId             = nNIMXRegisterMap120_mBuildFieldId(tWatchdogStatusRegister::kWatchdogExpiredCntId, kWatchdogStatusRegisterId),

      kWatchdogTimeoutRegisterId        = 15,
      kWatchdogTimeoutValueId           = nNIMXRegisterMap120_mBuildFieldId(tWatchdogTimeoutRegister::kWatchdogTimeoutValueId, kWatchdogTimeoutRegisterId),

      kWatchdogConfigurationId          = 16,
      kWatchdogExtTrigSelId             = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogExtTrigSelId, kWatchdogConfigurationId),
      kWatchdogExtTrigPolId             = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogExtTrigPolId, kWatchdogConfigurationId),
      kWatchdogExtTrigEnId              = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogExtTrigEnId, kWatchdogConfigurationId),
      kWatchdogIntTrigEnId              = nNIMXRegisterMap120_mBuildFieldId(tWatchdogConfiguration::kWatchdogIntTrigEnId, kWatchdogConfigurationId),

      kWatchdogControlId                = 17,
      kWatchdogCommandId                = nNIMXRegisterMap120_mBuildFieldId(tWatchdogControl::kWatchdogCommandId, kWatchdogControlId),

      kRTSI_Trig_Direction_RegisterId   = 18,
      kRTSIDirectionId                  = nNIMXRegisterMap120_mBuildFieldId(tRTSI_Trig_Direction_Register::kRTSIDirectionId, kRTSI_Trig_Direction_RegisterId),

      kRTSI_OutputSelectRegister_i0Id   = 19,
      kRTSI_OutSel0RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i0Id),

      kRTSI_OutputSelectRegister_i1Id   = 20,
      kRTSI_OutSel1RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i1Id),

      kRTSI_OutputSelectRegister_i2Id   = 21,
      kRTSI_OutSel2RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i2Id),

      kRTSI_OutputSelectRegister_i3Id   = 22,
      kRTSI_OutSel3RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i3Id),

      kRTSI_OutputSelectRegister_i4Id   = 23,
      kRTSI_OutSel4RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i4Id),

      kRTSI_OutputSelectRegister_i5Id   = 24,
      kRTSI_OutSel5RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i5Id),

      kRTSI_OutputSelectRegister_i6Id   = 25,
      kRTSI_OutSel6RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i6Id),

      kRTSI_OutputSelectRegister_i7Id   = 26,
      kRTSI_OutSel7RTSI_i_Output_SelectId     = nNIMXRegisterMap120_mBuildFieldId(tRTSI_OutputSelectRegister_t::kRTSI_i_Output_SelectId, kRTSI_OutputSelectRegister_i7Id),


      kMaxRegisterId = 26

   } tId;

   tChpServices(tBusSpaceReference addrSpace, nMDBG::tStatus2* statusChain = NULL);
   tChpServices();
   void initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* statusChain = NULL);
   void reset(nMDBG::tStatus2* statusChain = NULL);
   virtual ~tChpServices();

   inline tBusSpaceReference getBusSpaceReference(void) const;

   inline void setAddressOffset(u32 value, nMDBG::tStatus2* statusChain = NULL);
   inline u32  getAddressOffset(nMDBG::tStatus2* statusChain = NULL);
   inline tBoolean isDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markDirty(tId id, nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(tId id, nMDBG::tStatus2* statusChain = NULL);

   inline void markDirty(nMDBG::tStatus2* statusChain = NULL);
   inline void markClean(nMDBG::tStatus2* statusChain = NULL);

private:
   void _initialize(nMDBG::tStatus2* statusChain = NULL);
   tBusSpaceReference _addrSpace;
   u32 _addressOffset;
   u8 _dirtyVector[27];

};

#ifndef ___tChpServices_ipp___
#ifndef ___tChpServices_h_no_inline___
#include "tChpServices.ipp"
#endif

#endif

#endif


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

