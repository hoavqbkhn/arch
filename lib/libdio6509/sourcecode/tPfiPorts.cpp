// Copyright (c) 2012 National Instruments.
// All rights reserved.
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tPfiPorts_h___
#include "tPfiPorts.h"
#endif

tPfiPorts::tPfiPorts(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

tPfiPorts::tPfiPorts()

{
   _addressOffset = 0;

}

void tPfiPorts::initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* s)
{

   _addrSpace = addrSpace;
   _addressOffset = addressOffset;

   _initialize(s);
}

void tPfiPorts::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   PFI_ChangeDetectLatched_Register.setRegister(u16(0x0), s);
   PFI_ChangeIrq_Register.setRegister(u32(0x0), s);
   PFI_ChangeIrq_Register.markDirty(s);
   Static_Digital_Input_Register.setRegister(u16(0x0), s);
   Static_Digital_Output_Register.setRegister(u16(0x0), s);
   Static_Digital_Output_Register.markDirty(s);
   PFI_Direction_Register.setRegister(u16(0x0), s);
   PFI_Direction_Register.markDirty(s);
   unsigned int i;
   for(i = 0; i < 16; ++i) {
      PFI_OutputSelectRegister_i[i].setRegister(u8(0x0), s);
      PFI_OutputSelectRegister_i[i].markDirty(s);
   }
   PFI_Filter_Register_Port0Lo.setRegister(u16(0x0), s);
   PFI_Filter_Register_Port0Lo.markDirty(s);
   PFI_Filter_Register_Port0Hi.setRegister(u16(0x0), s);
   PFI_Filter_Register_Port0Hi.markDirty(s);
   PFI_Filter_Register_Port1Lo.setRegister(u16(0x0), s);
   PFI_Filter_Register_Port1Lo.markDirty(s);
   PFI_Filter_Register_Port1Hi.setRegister(u16(0x0), s);
   PFI_Filter_Register_Port1Hi.markDirty(s);
   PFI_WDT_SafeStateRegister.setRegister(u16(0x0), s);
   PFI_WDT_SafeStateRegister.markDirty(s);
   PFI_WDT_ModeSelect_Register.setRegister(u32(0x0), s);
   PFI_WDT_ModeSelect_Register.markDirty(s);
}

void tPfiPorts::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   {
      unsigned int i;
      for (i=0; i<16; ++i) {
         PFI_OutputSelectRegister_i[i].initialize(0xba + (0x1 * i), 0x5 + i);
      }
   }


   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   PFI_ChangeDetectLatched_Register.setRegisterMap(this);
   PFI_ChangeIrq_Register.setRegisterMap(this);
   Static_Digital_Input_Register.setRegisterMap(this);
   Static_Digital_Output_Register.setRegisterMap(this);
   PFI_Direction_Register.setRegisterMap(this);
   {
      unsigned int i;
      for(i = 0; i < 16; ++i) {
         PFI_OutputSelectRegister_i[i].setRegisterMap(this);
      }
   }
   PFI_Filter_Register_Port0Lo.setRegisterMap(this);
   PFI_Filter_Register_Port0Hi.setRegisterMap(this);
   PFI_Filter_Register_Port1Lo.setRegisterMap(this);
   PFI_Filter_Register_Port1Hi.setRegisterMap(this);
   PFI_WDT_SafeStateRegister.setRegisterMap(this);
   PFI_WDT_ModeSelect_Register.setRegisterMap(this);

   //----------------------------------------
   // initialize dirty flags
   //----------------------------------------
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tPfiPorts::~tPfiPorts()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

